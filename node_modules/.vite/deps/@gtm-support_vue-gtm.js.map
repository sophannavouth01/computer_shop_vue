{
  "version": 3,
  "sources": ["../../@gtm-support/core/src/assert-is-gtm-id.ts", "../../@gtm-support/core/src/utils.ts", "../../@gtm-support/core/src/gtm-support.ts", "../../@gtm-support/vue-gtm/src/index.ts"],
  "sourcesContent": ["/** GTM Container ID pattern. */\nexport const GTM_ID_PATTERN: RegExp = /^GTM-[0-9A-Z]+$/;\n\n/**\n * Assert that the given id is a valid GTM Container ID.\n *\n * Tested against pattern: `/^GTM-[0-9A-Z]+$/`.\n *\n * @param id A GTM Container ID.\n */\nexport function assertIsGtmId(id: string): asserts id {\n  if (typeof id !== 'string' || !GTM_ID_PATTERN.test(id)) {\n    const suggestion: string = String(id)\n      .toUpperCase()\n      .replace(/.*-|[^0-9A-Z]/g, '');\n    const suggestionText: string =\n      suggestion.length === 0 ? '' : ` Did you mean 'GTM-${suggestion}'?`;\n    throw new Error(\n      `'${id}' is not a valid GTM-ID (${GTM_ID_PATTERN}).${suggestionText}`,\n    );\n  }\n}\n", "import type { GtmQueryParams } from './gtm-container';\n\n/**\n *  OnReadyOptions.\n */\nexport interface OnReadyOptions {\n  /**\n   * The GTM id.\n   */\n  id: string;\n  /**\n   * The script element.\n   */\n  script: HTMLScriptElement;\n}\n\n/**\n * Options for `loadScript` function.\n */\nexport interface LoadScriptOptions {\n  /**\n   * Add url query string when load gtm.js with GTM ID.\n   */\n  queryParams?: GtmQueryParams;\n  /**\n   * Script can be set to `defer` to speed up page load at the cost of less accurate results (in case visitor leaves before script is loaded, which is unlikely but possible).\n   */\n  defer: boolean;\n  /**\n   * Will add `async` and `defer` to the script tag to not block requests for old browsers that do not support `async`.\n   */\n  compatibility: boolean;\n  /**\n   * Will add specified MIME type to script tag.\n   */\n  scriptType?: string;\n  /**\n   * Will add `nonce` to the script tag.\n   *\n   * @see [Using Google Tag Manager with a Content Security Policy](https://developers.google.com/tag-manager/web/csp)\n   */\n  nonce?: string;\n  /**\n   * Where to append the script element.\n   *\n   * @default document.body\n   */\n  parentElement?: HTMLElement;\n  /**\n   * The URL of the script; useful for server-side GTM.\n   *\n   * @default https://www.googletagmanager.com/gtm.js\n   */\n  source?: string;\n  /**\n   * Will be called when the script is loaded.\n   *\n   * @param options Object containing container `id` and `script` element.\n   */\n  onReady?: (options: OnReadyOptions) => void;\n}\n\n/**\n * Load GTM script tag.\n *\n * @param id GTM ID.\n * @param config The config object.\n *\n * @returns The script element.\n */\nexport function loadScript(\n  id: string,\n  config: LoadScriptOptions,\n): HTMLScriptElement {\n  const doc: Document = document;\n  const script: HTMLScriptElement = doc.createElement('script');\n\n  const scriptLoadListener: (event: Event) => void = (event) => {\n    config.onReady?.({ id, script });\n    script.removeEventListener('load', scriptLoadListener);\n  };\n\n  script.addEventListener('load', scriptLoadListener);\n\n  window.dataLayer = window.dataLayer ?? [];\n\n  window.dataLayer?.push({\n    event: 'gtm.js',\n    'gtm.start': new Date().getTime(),\n  });\n\n  if (!id) {\n    return script;\n  }\n\n  script.async = !config.defer;\n  script.defer = Boolean(config.defer || config.compatibility);\n\n  if (config.nonce) {\n    script.nonce = config.nonce;\n  }\n\n  if (config.scriptType) {\n    script.type = config.scriptType;\n  }\n\n  const queryString: URLSearchParams = new URLSearchParams({\n    id,\n    ...(config.queryParams ?? {}),\n  });\n\n  const source: string =\n    config.source ?? 'https://www.googletagmanager.com/gtm.js';\n\n  script.src = `${source}?${queryString}`;\n\n  const parentElement: HTMLElement = config.parentElement ?? doc.body;\n\n  if (typeof parentElement?.appendChild !== 'function') {\n    throw new Error('parentElement must be a DOM element');\n  }\n\n  parentElement.appendChild(script);\n\n  return script;\n}\n\n/**\n * Check if GTM script is in the document.\n *\n * @param source The URL of the script, if it differs from the default. Default: 'https://www.googletagmanager.com/gtm.js'.\n *\n * @returns `true` if in the `document` is a `script` with `src` containing `'https://www.googletagmanager.com/gtm.js'` (or `source` if specified), otherwise `false`.\n */\nexport function hasScript(\n  source: string = 'https://www.googletagmanager.com/gtm.js',\n): boolean {\n  return Array.from(document.getElementsByTagName('script')).some((script) =>\n    script.src.includes(source),\n  );\n}\n", "import { assertIsGtmId } from './assert-is-gtm-id';\nimport type { DataLayerObject } from './data-layer-object';\nimport type { GtmIdContainer } from './gtm-container';\nimport type { GtmSupportOptions } from './options';\nimport type { LoadScriptOptions } from './utils';\nimport { hasScript, loadScript } from './utils';\n\n/**\n * Object definition for a track event.\n */\nexport interface TrackEventOptions {\n  [key: string]: any;\n  event?: string;\n  category?: any;\n  action?: any;\n  label?: any;\n  value?: any;\n  noninteraction?: boolean;\n}\n\n/**\n * The GTM Support main class.\n */\nexport class GtmSupport {\n  /** GTM Container ID. */\n  public readonly id: string | string[] | GtmIdContainer[];\n  /** GTM Support Options. */\n  public readonly options: Omit<GtmSupportOptions, 'id'>;\n\n  public readonly scriptElements: HTMLScriptElement[] = [];\n\n  /**\n   * Constructs a new `GtmSupport` instance.\n   *\n   * @param options Options.\n   */\n  public constructor(options: GtmSupportOptions) {\n    if (Array.isArray(options.id)) {\n      for (const idOrObject of options.id) {\n        if (typeof idOrObject === 'string') {\n          assertIsGtmId(idOrObject);\n        } else {\n          assertIsGtmId(idOrObject.id);\n        }\n      }\n    } else {\n      assertIsGtmId(options.id);\n    }\n\n    this.id = options.id;\n    this.options = {\n      enabled: true,\n      debug: false,\n      loadScript: true,\n      defer: false,\n      compatibility: false,\n      ...options,\n    };\n\n    // @ts-expect-error: Just remove the id from options\n    delete this.options.id;\n  }\n\n  /**\n   * Whether the script is running in a browser or not.\n   *\n   * You can override this function if you need to.\n   *\n   * @returns `true` if the script runs in browser context.\n   */\n  public isInBrowserContext: () => boolean = () =>\n    typeof window !== 'undefined';\n\n  /**\n   * Check if plugin is enabled.\n   *\n   * @returns `true` if the plugin is enabled, otherwise `false`.\n   */\n  public enabled(): boolean {\n    return this.options.enabled ?? true;\n  }\n\n  /**\n   * Enable or disable plugin.\n   *\n   * When enabling with this function, the script will be attached to the `document` if:\n   *\n   * - the script runs in browser context\n   * - the `document` doesn't have the script already attached\n   * - the `loadScript` option is set to `true`\n   *\n   * @param enabled `true` to enable, `false` to disable. Default: `true`.\n   * @param source The URL of the script, if it differs from the default. Default: 'https://www.googletagmanager.com/gtm.js'.\n   */\n  public enable(enabled: boolean = true, source?: string): void {\n    this.options.enabled = enabled;\n\n    if (\n      this.isInBrowserContext() &&\n      enabled &&\n      !hasScript(source) &&\n      this.options.loadScript\n    ) {\n      if (Array.isArray(this.id)) {\n        this.id.forEach((id: string | GtmIdContainer) => {\n          let scriptElement: HTMLScriptElement;\n          if (typeof id === 'string') {\n            scriptElement = loadScript(id, {\n              ...this.options,\n            } as LoadScriptOptions);\n          } else {\n            scriptElement = loadScript(id.id, {\n              ...this.options,\n              queryParams: id.queryParams,\n            } as LoadScriptOptions);\n          }\n          this.scriptElements.push(scriptElement);\n        });\n      } else {\n        const scriptElement: HTMLScriptElement = loadScript(this.id, {\n          ...this.options,\n        } as LoadScriptOptions);\n        this.scriptElements.push(scriptElement);\n      }\n    }\n  }\n\n  /**\n   * Check if plugin is in debug mode.\n   *\n   * @returns `true` if the plugin is in debug mode, otherwise `false`.\n   */\n  public debugEnabled(): boolean {\n    return this.options.debug ?? false;\n  }\n\n  /**\n   * Enable or disable debug mode.\n   *\n   * @param enable `true` to enable, `false` to disable.\n   */\n  public debug(enable: boolean): void {\n    this.options.debug = enable;\n  }\n\n  /**\n   * Returns the `window.dataLayer` array if the script is running in browser context and the plugin is enabled,\n   * otherwise `false`.\n   *\n   * @returns The `window.dataLayer` if script is running in browser context and plugin is enabled, otherwise `false`.\n   */\n  public dataLayer(): DataLayerObject[] | false {\n    if (this.isInBrowserContext() && this.options.enabled) {\n      return (window.dataLayer = window.dataLayer ?? []);\n    }\n    return false;\n  }\n\n  /**\n   * Track a view event with `event: \"content-view\"`.\n   *\n   * The event will only be send if the script runs in browser context and the plugin is enabled.\n   *\n   * If debug mode is enabled, a \"Dispatching TrackView\" is logged,\n   * regardless of whether the plugin is enabled or the plugin is being executed in browser context.\n   *\n   * @param screenName Name of the screen passed as `\"content-view-name\"`.\n   * @param path Path passed as `\"content-name\"`.\n   * @param additionalEventData Additional data for the event object. `event`, `\"content-name\"` and `\"content-view-name\"` will always be overridden.\n   */\n  public trackView(\n    screenName: string,\n    path: string,\n    additionalEventData: Record<string, any> = {},\n  ): void {\n    const trigger: boolean =\n      this.isInBrowserContext() && (this.options.enabled ?? false);\n    if (this.options.debug) {\n      console.log(\n        `[GTM-Support${trigger ? '' : '(disabled)'}]: Dispatching TrackView`,\n        { screenName, path },\n      );\n    }\n\n    if (trigger) {\n      const dataLayer: DataLayerObject[] = (window.dataLayer =\n        window.dataLayer ?? []);\n      dataLayer.push({\n        ...additionalEventData,\n        event: this.options.trackViewEventProperty ?? 'content-view',\n        'content-name': path,\n        'content-view-name': screenName,\n      });\n    }\n  }\n\n  /**\n   * Track an event.\n   *\n   * The event will only be send if the script runs in browser context and the plugin is enabled.\n   *\n   * If debug mode is enabled, a \"Dispatching event\" is logged,\n   * regardless of whether the plugin is enabled or the plugin is being executed in browser context.\n   *\n   * @param param0 Object that will be used for configuring the event object passed to GTM.\n   * @param param0.event `event`, default to `\"interaction\"` when pushed to `window.dataLayer`.\n   * @param param0.category Optional `category`, passed as `target`.\n   * @param param0.action Optional `action`, passed as `action`.\n   * @param param0.label Optional `label`, passed as `\"target-properties\"`.\n   * @param param0.value Optional `value`, passed as `value`.\n   * @param param0.noninteraction Optional `noninteraction`, passed as `\"interaction-type\"`.\n   */\n  public trackEvent({\n    event,\n    category = null,\n    action = null,\n    label = null,\n    value = null,\n    noninteraction = false,\n    ...rest\n  }: TrackEventOptions = {}): void {\n    const trigger: boolean =\n      this.isInBrowserContext() && (this.options.enabled ?? false);\n    if (this.options.debug) {\n      console.log(\n        `[GTM-Support${trigger ? '' : '(disabled)'}]: Dispatching event`,\n        {\n          event,\n          category,\n          action,\n          label,\n          value,\n          ...rest,\n        },\n      );\n    }\n\n    if (trigger) {\n      const dataLayer: DataLayerObject[] = (window.dataLayer =\n        window.dataLayer ?? []);\n      dataLayer.push({\n        event: event ?? 'interaction',\n        target: category,\n        action: action,\n        'target-properties': label,\n        value: value,\n        'interaction-type': noninteraction,\n        ...rest,\n      });\n    }\n  }\n\n  /**\n   * Track an event by pushing the custom data directly to the `window.dataLayer`.\n   *\n   * The event will only be send if the script runs in browser context and the plugin is enabled.\n   *\n   * If debug mode is enabled, a \"Dispatching event\" is logged,\n   * regardless of whether the plugin is enabled or the plugin is being executed in browser context.\n   *\n   * @param data Event data object that is pushed to the `window.dataLayer`.\n   */\n  public push(data: DataLayerObject): void {\n    const trigger: boolean =\n      this.isInBrowserContext() && (this.options.enabled ?? false);\n    if (this.options.debug) {\n      console.log(\n        `[GTM-Support${trigger ? '' : '(disabled)'}]: Dispatching event`,\n        data,\n      );\n    }\n\n    if (trigger) {\n      const dataLayer: DataLayerObject[] = (window.dataLayer =\n        window.dataLayer ?? []);\n      dataLayer.push(data);\n    }\n  }\n}\n", "import type {\n  GtmIdContainer,\n  GtmQueryParams,\n  GtmSupportOptions,\n  LoadScriptOptions,\n} from '@gtm-support/core';\nimport { GtmSupport as GtmPlugin, loadScript } from '@gtm-support/core';\nimport type { App, Plugin } from 'vue';\nimport { nextTick } from 'vue';\nimport type {\n  ErrorTypes,\n  NavigationFailure,\n  RouteLocationNormalized,\n  Router,\n} from 'vue-router';\n\n// eslint-disable-next-line jsdoc/require-jsdoc\ntype IgnoredViews =\n  | string[]\n  | ((to: RouteLocationNormalized, from: RouteLocationNormalized) => boolean);\n\n/**\n * Options passed to the plugin.\n */\nexport interface VueGtmUseOptions extends GtmSupportOptions {\n  /**\n   * Pass the router instance to automatically sync with router.\n   */\n  vueRouter?: Router;\n  /**\n   * Derive additional event data after navigation.\n   */\n  vueRouterAdditionalEventData?: (\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalized,\n  ) => Record<string, any> | Promise<Record<string, any>>;\n  /**\n   * Don't trigger events for specified router names.\n   */\n  ignoredViews?: IgnoredViews;\n  /**\n   * Whether or not call `trackView` in `Vue.nextTick`.\n   */\n  trackOnNextTick?: boolean;\n}\n\nlet gtmPlugin: GtmPlugin | undefined;\n\n/**\n * Installation procedure.\n *\n * @param app The Vue app instance.\n * @param options Configuration options.\n */\nfunction install(app: App, options: VueGtmUseOptions = { id: '' }): void {\n  // Apply default configuration\n  options = { trackOnNextTick: false, ...options };\n\n  // Add to vue prototype and also from globals\n  gtmPlugin = new GtmPlugin(options);\n  app.config.globalProperties.$gtm = gtmPlugin;\n\n  // Check if plugin is running in a real browser or e.g. in SSG mode\n  if (gtmPlugin.isInBrowserContext()) {\n    // Handle vue-router if defined\n    if (options.vueRouter) {\n      initVueRouterGuard(\n        app,\n        options.vueRouter,\n        options.ignoredViews,\n        options.trackOnNextTick,\n        options.vueRouterAdditionalEventData,\n      );\n    }\n\n    // Load GTM script when enabled\n    if (gtmPlugin.options.enabled && gtmPlugin.options.loadScript) {\n      if (Array.isArray(options.id)) {\n        options.id.forEach((id: string | GtmIdContainer) => {\n          if (typeof id === 'string') {\n            loadScript(id, options as LoadScriptOptions);\n          } else {\n            const newConf: VueGtmUseOptions = {\n              ...options,\n            };\n\n            if (id.queryParams != null) {\n              newConf.queryParams = {\n                ...newConf.queryParams,\n                ...id.queryParams,\n              } as GtmQueryParams;\n            }\n\n            loadScript(id.id, newConf as LoadScriptOptions);\n          }\n        });\n      } else {\n        loadScript(options.id, options as LoadScriptOptions);\n      }\n    }\n  }\n\n  app.provide('gtm', options);\n}\n\n// eslint-disable-next-line jsdoc/require-jsdoc\ntype NavigationFailureType =\n  | ErrorTypes.NAVIGATION_ABORTED\n  | ErrorTypes.NAVIGATION_CANCELLED\n  | ErrorTypes.NAVIGATION_DUPLICATED;\n\n/**\n * Initialize the router guard.\n *\n * @param app The Vue app instance.\n * @param vueRouter The Vue router instance to attach the guard.\n * @param ignoredViews An array of route name that will be ignored.\n * @param trackOnNextTick Whether or not to call `trackView` in `Vue.nextTick`.\n * @param deriveAdditionalEventData Callback to derive additional event data.\n */\nfunction initVueRouterGuard(\n  app: App,\n  vueRouter: Exclude<VueGtmUseOptions['vueRouter'], undefined>,\n  ignoredViews: VueGtmUseOptions['ignoredViews'] = [],\n  trackOnNextTick: VueGtmUseOptions['trackOnNextTick'],\n  deriveAdditionalEventData: VueGtmUseOptions['vueRouterAdditionalEventData'] = () => ({}),\n): void {\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  function isNavigationFailure(\n    failure: void | NavigationFailure | undefined,\n    navigationFailureType: NavigationFailureType,\n  ): boolean {\n    if (!(failure instanceof Error)) {\n      return false;\n    }\n    return !!(failure.type & navigationFailureType);\n  }\n\n  vueRouter.afterEach(async (to, from, failure) => {\n    // Ignore some routes\n    if (\n      typeof to.name !== 'string' ||\n      (Array.isArray(ignoredViews) && ignoredViews.includes(to.name)) ||\n      (typeof ignoredViews === 'function' && ignoredViews(to, from))\n    ) {\n      return;\n    }\n\n    // Dispatch vue event using meta gtm value if defined otherwise fallback to route name\n    const name: string =\n      to.meta && typeof to.meta.gtm === 'string' && !!to.meta.gtm\n        ? to.meta.gtm\n        : to.name;\n\n    if (isNavigationFailure(failure, 4 /* NAVIGATION_ABORTED */)) {\n      if (gtmPlugin?.debugEnabled()) {\n        console.log(\n          `[VueGtm]: '${name}' not tracked due to navigation aborted`,\n        );\n      }\n    } else if (isNavigationFailure(failure, 8 /* NAVIGATION_CANCELLED */)) {\n      if (gtmPlugin?.debugEnabled()) {\n        console.log(\n          `[VueGtm]: '${name}' not tracked due to navigation cancelled`,\n        );\n      }\n    }\n\n    const additionalEventData: Record<string, any> = {\n      ...(await deriveAdditionalEventData(to, from)),\n      ...(to.meta?.gtmAdditionalEventData as Record<string, any>),\n    };\n    const baseUrl: string = vueRouter.options?.history?.base ?? '';\n    let fullUrl: string = baseUrl;\n    if (!fullUrl.endsWith('/')) {\n      fullUrl += '/';\n    }\n    fullUrl += to.fullPath.startsWith('/')\n      ? to.fullPath.substring(1)\n      : to.fullPath;\n\n    if (trackOnNextTick) {\n      void nextTick(() => {\n        gtmPlugin?.trackView(name, fullUrl, additionalEventData);\n      });\n    } else {\n      gtmPlugin?.trackView(name, fullUrl, additionalEventData);\n    }\n  });\n}\n\n/**\n * Create the Vue GTM instance.\n *\n * @param options Options.\n * @returns The Vue GTM plugin instance.\n */\nexport function createGtm(options: VueGtmUseOptions): VueGtmPlugin {\n  return { install: (app: App) => install(app, options) };\n}\n\n// @ts-expect-error: assume that `vue` already brings this dependency\ndeclare module '@vue/runtime-core' {\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  export interface ComponentCustomProperties {\n    /**\n     * The Vue GTM Plugin instance.\n     */\n    $gtm: GtmPlugin;\n  }\n}\n\n/**\n * Vue GTM Plugin.\n */\nexport type VueGtmPlugin = Plugin;\n\nconst _default: VueGtmPlugin = { install };\n\nexport {\n  GtmSupport,\n  assertIsGtmId,\n  hasScript,\n  loadScript,\n} from '@gtm-support/core';\nexport type {\n  DataLayerObject,\n  GtmIdContainer,\n  GtmQueryParams,\n  GtmSupportOptions,\n  LoadScriptOptions,\n  TrackEventOptions,\n} from '@gtm-support/core';\nexport { GtmPlugin };\nexport default _default;\n\n/**\n * Returns GTM plugin instance to be used via Composition API inside setup method.\n *\n * @returns The Vue GTM instance if the it was installed, otherwise `undefined`.\n */\nexport function useGtm(): GtmPlugin | undefined {\n  return gtmPlugin;\n}\n"],
  "mappings": "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",
  "names": ["GTM_ID_PATTERN", "assertIsGtmId", "id", "suggestion", "suggestionText", "loadScript", "config", "doc", "script", "scriptLoadListener", "event", "_a", "queryString", "source", "parentElement", "hasScript", "GtmSupport", "options", "idOrObject", "enabled", "scriptElement", "enable", "screenName", "path", "additionalEventData", "trigger", "category", "action", "label", "value", "noninteraction", "rest", "data", "gtmPlugin", "install", "app", "options", "GtmPlugin", "initVueRouterGuard", "id", "loadScript", "newConf", "vueRouter", "ignoredViews", "trackOnNextTick", "deriveAdditionalEventData", "isNavigationFailure", "failure", "navigationFailureType", "to", "from", "name", "additionalEventData", "fullUrl", "nextTick", "createGtm", "_default", "src_default", "useGtm"]
}
