{"version":3,"sources":["../src/index.ts","../src/assert-is-gtm-id.ts","../src/utils.ts","../src/gtm-support.ts"],"sourcesContent":["import type { DataLayerObject } from './data-layer-object';\n\ndeclare global {\n  interface Window {\n    /**\n     * `dataLayer` used by GTM.\n     *\n     * @see [developers.google.com/tag-manager/devguide](https://developers.google.com/tag-manager/devguide)\n     */\n    dataLayer?: DataLayerObject[];\n  }\n}\n\nexport { GTM_ID_PATTERN, assertIsGtmId } from './assert-is-gtm-id';\nexport type { DataLayerObject } from './data-layer-object';\nexport type { GtmIdContainer, GtmQueryParams } from './gtm-container';\nexport { GtmSupport } from './gtm-support';\nexport type { TrackEventOptions } from './gtm-support';\nexport type { GtmSupportOptions } from './options';\nexport { hasScript, loadScript } from './utils';\nexport type { LoadScriptOptions, OnReadyOptions } from './utils';\n","/** GTM Container ID pattern. */\nexport const GTM_ID_PATTERN: RegExp = /^GTM-[0-9A-Z]+$/;\n\n/**\n * Assert that the given id is a valid GTM Container ID.\n *\n * Tested against pattern: `/^GTM-[0-9A-Z]+$/`.\n *\n * @param id A GTM Container ID.\n */\nexport function assertIsGtmId(id: string): asserts id {\n  if (typeof id !== 'string' || !GTM_ID_PATTERN.test(id)) {\n    const suggestion: string = String(id)\n      .toUpperCase()\n      .replace(/.*-|[^0-9A-Z]/g, '');\n    const suggestionText: string =\n      suggestion.length === 0 ? '' : ` Did you mean 'GTM-${suggestion}'?`;\n    throw new Error(\n      `'${id}' is not a valid GTM-ID (${GTM_ID_PATTERN}).${suggestionText}`,\n    );\n  }\n}\n","import type { GtmQueryParams } from './gtm-container';\n\n/**\n *  OnReadyOptions.\n */\nexport interface OnReadyOptions {\n  /**\n   * The GTM id.\n   */\n  id: string;\n  /**\n   * The script element.\n   */\n  script: HTMLScriptElement;\n}\n\n/**\n * Options for `loadScript` function.\n */\nexport interface LoadScriptOptions {\n  /**\n   * Add url query string when load gtm.js with GTM ID.\n   */\n  queryParams?: GtmQueryParams;\n  /**\n   * Script can be set to `defer` to speed up page load at the cost of less accurate results (in case visitor leaves before script is loaded, which is unlikely but possible).\n   */\n  defer: boolean;\n  /**\n   * Will add `async` and `defer` to the script tag to not block requests for old browsers that do not support `async`.\n   */\n  compatibility: boolean;\n  /**\n   * Will add specified MIME type to script tag.\n   */\n  scriptType?: string;\n  /**\n   * Will add `nonce` to the script tag.\n   *\n   * @see [Using Google Tag Manager with a Content Security Policy](https://developers.google.com/tag-manager/web/csp)\n   */\n  nonce?: string;\n  /**\n   * Where to append the script element.\n   *\n   * @default document.body\n   */\n  parentElement?: HTMLElement;\n  /**\n   * The URL of the script; useful for server-side GTM.\n   *\n   * @default https://www.googletagmanager.com/gtm.js\n   */\n  source?: string;\n  /**\n   * Will be called when the script is loaded.\n   *\n   * @param options Object containing container `id` and `script` element.\n   */\n  onReady?: (options: OnReadyOptions) => void;\n}\n\n/**\n * Load GTM script tag.\n *\n * @param id GTM ID.\n * @param config The config object.\n *\n * @returns The script element.\n */\nexport function loadScript(\n  id: string,\n  config: LoadScriptOptions,\n): HTMLScriptElement {\n  const doc: Document = document;\n  const script: HTMLScriptElement = doc.createElement('script');\n\n  const scriptLoadListener: (event: Event) => void = (event) => {\n    config.onReady?.({ id, script });\n    script.removeEventListener('load', scriptLoadListener);\n  };\n\n  script.addEventListener('load', scriptLoadListener);\n\n  window.dataLayer = window.dataLayer ?? [];\n\n  window.dataLayer?.push({\n    event: 'gtm.js',\n    'gtm.start': new Date().getTime(),\n  });\n\n  if (!id) {\n    return script;\n  }\n\n  script.async = !config.defer;\n  script.defer = Boolean(config.defer || config.compatibility);\n\n  if (config.nonce) {\n    script.nonce = config.nonce;\n  }\n\n  if (config.scriptType) {\n    script.type = config.scriptType;\n  }\n\n  const queryString: URLSearchParams = new URLSearchParams({\n    id,\n    ...(config.queryParams ?? {}),\n  });\n\n  const source: string =\n    config.source ?? 'https://www.googletagmanager.com/gtm.js';\n\n  script.src = `${source}?${queryString}`;\n\n  const parentElement: HTMLElement = config.parentElement ?? doc.body;\n\n  if (typeof parentElement?.appendChild !== 'function') {\n    throw new Error('parentElement must be a DOM element');\n  }\n\n  parentElement.appendChild(script);\n\n  return script;\n}\n\n/**\n * Check if GTM script is in the document.\n *\n * @param source The URL of the script, if it differs from the default. Default: 'https://www.googletagmanager.com/gtm.js'.\n *\n * @returns `true` if in the `document` is a `script` with `src` containing `'https://www.googletagmanager.com/gtm.js'` (or `source` if specified), otherwise `false`.\n */\nexport function hasScript(\n  source: string = 'https://www.googletagmanager.com/gtm.js',\n): boolean {\n  return Array.from(document.getElementsByTagName('script')).some((script) =>\n    script.src.includes(source),\n  );\n}\n","import { assertIsGtmId } from './assert-is-gtm-id';\nimport type { DataLayerObject } from './data-layer-object';\nimport type { GtmIdContainer } from './gtm-container';\nimport type { GtmSupportOptions } from './options';\nimport type { LoadScriptOptions } from './utils';\nimport { hasScript, loadScript } from './utils';\n\n/**\n * Object definition for a track event.\n */\nexport interface TrackEventOptions {\n  [key: string]: any;\n  event?: string;\n  category?: any;\n  action?: any;\n  label?: any;\n  value?: any;\n  noninteraction?: boolean;\n}\n\n/**\n * The GTM Support main class.\n */\nexport class GtmSupport {\n  /** GTM Container ID. */\n  public readonly id: string | string[] | GtmIdContainer[];\n  /** GTM Support Options. */\n  public readonly options: Omit<GtmSupportOptions, 'id'>;\n\n  public readonly scriptElements: HTMLScriptElement[] = [];\n\n  /**\n   * Constructs a new `GtmSupport` instance.\n   *\n   * @param options Options.\n   */\n  public constructor(options: GtmSupportOptions) {\n    if (Array.isArray(options.id)) {\n      for (const idOrObject of options.id) {\n        if (typeof idOrObject === 'string') {\n          assertIsGtmId(idOrObject);\n        } else {\n          assertIsGtmId(idOrObject.id);\n        }\n      }\n    } else {\n      assertIsGtmId(options.id);\n    }\n\n    this.id = options.id;\n    this.options = {\n      enabled: true,\n      debug: false,\n      loadScript: true,\n      defer: false,\n      compatibility: false,\n      ...options,\n    };\n\n    // @ts-expect-error: Just remove the id from options\n    delete this.options.id;\n  }\n\n  /**\n   * Whether the script is running in a browser or not.\n   *\n   * You can override this function if you need to.\n   *\n   * @returns `true` if the script runs in browser context.\n   */\n  public isInBrowserContext: () => boolean = () =>\n    typeof window !== 'undefined';\n\n  /**\n   * Check if plugin is enabled.\n   *\n   * @returns `true` if the plugin is enabled, otherwise `false`.\n   */\n  public enabled(): boolean {\n    return this.options.enabled ?? true;\n  }\n\n  /**\n   * Enable or disable plugin.\n   *\n   * When enabling with this function, the script will be attached to the `document` if:\n   *\n   * - the script runs in browser context\n   * - the `document` doesn't have the script already attached\n   * - the `loadScript` option is set to `true`\n   *\n   * @param enabled `true` to enable, `false` to disable. Default: `true`.\n   * @param source The URL of the script, if it differs from the default. Default: 'https://www.googletagmanager.com/gtm.js'.\n   */\n  public enable(enabled: boolean = true, source?: string): void {\n    this.options.enabled = enabled;\n\n    if (\n      this.isInBrowserContext() &&\n      enabled &&\n      !hasScript(source) &&\n      this.options.loadScript\n    ) {\n      if (Array.isArray(this.id)) {\n        this.id.forEach((id: string | GtmIdContainer) => {\n          let scriptElement: HTMLScriptElement;\n          if (typeof id === 'string') {\n            scriptElement = loadScript(id, {\n              ...this.options,\n            } as LoadScriptOptions);\n          } else {\n            scriptElement = loadScript(id.id, {\n              ...this.options,\n              queryParams: id.queryParams,\n            } as LoadScriptOptions);\n          }\n          this.scriptElements.push(scriptElement);\n        });\n      } else {\n        const scriptElement: HTMLScriptElement = loadScript(this.id, {\n          ...this.options,\n        } as LoadScriptOptions);\n        this.scriptElements.push(scriptElement);\n      }\n    }\n  }\n\n  /**\n   * Check if plugin is in debug mode.\n   *\n   * @returns `true` if the plugin is in debug mode, otherwise `false`.\n   */\n  public debugEnabled(): boolean {\n    return this.options.debug ?? false;\n  }\n\n  /**\n   * Enable or disable debug mode.\n   *\n   * @param enable `true` to enable, `false` to disable.\n   */\n  public debug(enable: boolean): void {\n    this.options.debug = enable;\n  }\n\n  /**\n   * Returns the `window.dataLayer` array if the script is running in browser context and the plugin is enabled,\n   * otherwise `false`.\n   *\n   * @returns The `window.dataLayer` if script is running in browser context and plugin is enabled, otherwise `false`.\n   */\n  public dataLayer(): DataLayerObject[] | false {\n    if (this.isInBrowserContext() && this.options.enabled) {\n      return (window.dataLayer = window.dataLayer ?? []);\n    }\n    return false;\n  }\n\n  /**\n   * Track a view event with `event: \"content-view\"`.\n   *\n   * The event will only be send if the script runs in browser context and the plugin is enabled.\n   *\n   * If debug mode is enabled, a \"Dispatching TrackView\" is logged,\n   * regardless of whether the plugin is enabled or the plugin is being executed in browser context.\n   *\n   * @param screenName Name of the screen passed as `\"content-view-name\"`.\n   * @param path Path passed as `\"content-name\"`.\n   * @param additionalEventData Additional data for the event object. `event`, `\"content-name\"` and `\"content-view-name\"` will always be overridden.\n   */\n  public trackView(\n    screenName: string,\n    path: string,\n    additionalEventData: Record<string, any> = {},\n  ): void {\n    const trigger: boolean =\n      this.isInBrowserContext() && (this.options.enabled ?? false);\n    if (this.options.debug) {\n      console.log(\n        `[GTM-Support${trigger ? '' : '(disabled)'}]: Dispatching TrackView`,\n        { screenName, path },\n      );\n    }\n\n    if (trigger) {\n      const dataLayer: DataLayerObject[] = (window.dataLayer =\n        window.dataLayer ?? []);\n      dataLayer.push({\n        ...additionalEventData,\n        event: this.options.trackViewEventProperty ?? 'content-view',\n        'content-name': path,\n        'content-view-name': screenName,\n      });\n    }\n  }\n\n  /**\n   * Track an event.\n   *\n   * The event will only be send if the script runs in browser context and the plugin is enabled.\n   *\n   * If debug mode is enabled, a \"Dispatching event\" is logged,\n   * regardless of whether the plugin is enabled or the plugin is being executed in browser context.\n   *\n   * @param param0 Object that will be used for configuring the event object passed to GTM.\n   * @param param0.event `event`, default to `\"interaction\"` when pushed to `window.dataLayer`.\n   * @param param0.category Optional `category`, passed as `target`.\n   * @param param0.action Optional `action`, passed as `action`.\n   * @param param0.label Optional `label`, passed as `\"target-properties\"`.\n   * @param param0.value Optional `value`, passed as `value`.\n   * @param param0.noninteraction Optional `noninteraction`, passed as `\"interaction-type\"`.\n   */\n  public trackEvent({\n    event,\n    category = null,\n    action = null,\n    label = null,\n    value = null,\n    noninteraction = false,\n    ...rest\n  }: TrackEventOptions = {}): void {\n    const trigger: boolean =\n      this.isInBrowserContext() && (this.options.enabled ?? false);\n    if (this.options.debug) {\n      console.log(\n        `[GTM-Support${trigger ? '' : '(disabled)'}]: Dispatching event`,\n        {\n          event,\n          category,\n          action,\n          label,\n          value,\n          ...rest,\n        },\n      );\n    }\n\n    if (trigger) {\n      const dataLayer: DataLayerObject[] = (window.dataLayer =\n        window.dataLayer ?? []);\n      dataLayer.push({\n        event: event ?? 'interaction',\n        target: category,\n        action: action,\n        'target-properties': label,\n        value: value,\n        'interaction-type': noninteraction,\n        ...rest,\n      });\n    }\n  }\n\n  /**\n   * Track an event by pushing the custom data directly to the `window.dataLayer`.\n   *\n   * The event will only be send if the script runs in browser context and the plugin is enabled.\n   *\n   * If debug mode is enabled, a \"Dispatching event\" is logged,\n   * regardless of whether the plugin is enabled or the plugin is being executed in browser context.\n   *\n   * @param data Event data object that is pushed to the `window.dataLayer`.\n   */\n  public push(data: DataLayerObject): void {\n    const trigger: boolean =\n      this.isInBrowserContext() && (this.options.enabled ?? false);\n    if (this.options.debug) {\n      console.log(\n        `[GTM-Support${trigger ? '' : '(disabled)'}]: Dispatching event`,\n        data,\n      );\n    }\n\n    if (trigger) {\n      const dataLayer: DataLayerObject[] = (window.dataLayer =\n        window.dataLayer ?? []);\n      dataLayer.push(data);\n    }\n  }\n}\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,EAAA,eAAAC,EAAA,kBAAAC,EAAA,cAAAC,EAAA,eAAAC,IAAA,eAAAC,EAAAP,GCCO,IAAMQ,EAAyB,kBAS/B,SAASC,EAAcC,EAAwB,CACpD,GAAI,OAAOA,GAAO,UAAY,CAACF,EAAe,KAAKE,CAAE,EAAG,CACtD,IAAMC,EAAqB,OAAOD,CAAE,EACjC,YAAY,EACZ,QAAQ,iBAAkB,EAAE,EACzBE,EACJD,EAAW,SAAW,EAAI,GAAK,sBAAsBA,CAAU,KACjE,MAAM,IAAI,MACR,IAAID,CAAE,4BAA4BF,CAAc,KAAKI,CAAc,EACrE,CACF,CACF,CCiDO,SAASC,EACdC,EACAC,EACmB,CACnB,IAAMC,EAAgB,SAChBC,EAA4BD,EAAI,cAAc,QAAQ,EAEtDE,EAA8CC,GAAU,CAC5DJ,EAAO,UAAU,CAAE,GAAAD,EAAI,OAAAG,CAAO,CAAC,EAC/BA,EAAO,oBAAoB,OAAQC,CAAkB,CACvD,EAWA,GATAD,EAAO,iBAAiB,OAAQC,CAAkB,EAElD,OAAO,UAAY,OAAO,WAAa,CAAC,EAExC,OAAO,WAAW,KAAK,CACrB,MAAO,SACP,YAAa,IAAI,KAAK,EAAE,QAAQ,CAClC,CAAC,EAEG,CAACJ,EACH,OAAOG,EAGTA,EAAO,MAAQ,CAACF,EAAO,MACvBE,EAAO,MAAQ,GAAQF,EAAO,OAASA,EAAO,eAE1CA,EAAO,QACTE,EAAO,MAAQF,EAAO,OAGpBA,EAAO,aACTE,EAAO,KAAOF,EAAO,YAGvB,IAAMK,EAA+B,IAAI,gBAAgB,CACvD,GAAAN,EACA,GAAIC,EAAO,aAAe,CAAC,CAC7B,CAAC,EAEKM,EACJN,EAAO,QAAU,0CAEnBE,EAAO,IAAM,GAAGI,CAAM,IAAID,CAAW,GAErC,IAAME,EAA6BP,EAAO,eAAiBC,EAAI,KAE/D,GAAI,OAAOM,GAAe,aAAgB,WACxC,MAAM,IAAI,MAAM,qCAAqC,EAGvD,OAAAA,EAAc,YAAYL,CAAM,EAEzBA,CACT,CASO,SAASM,EACdF,EAAiB,0CACR,CACT,OAAO,MAAM,KAAK,SAAS,qBAAqB,QAAQ,CAAC,EAAE,KAAMJ,GAC/DA,EAAO,IAAI,SAASI,CAAM,CAC5B,CACF,CCrHO,IAAMG,EAAN,KAAiB,CAEN,GAEA,QAEA,eAAsC,CAAC,EAOhD,YAAYC,EAA4B,CAC7C,GAAI,MAAM,QAAQA,EAAQ,EAAE,EAC1B,QAAWC,KAAcD,EAAQ,GAC3B,OAAOC,GAAe,SACxBC,EAAcD,CAAU,EAExBC,EAAcD,EAAW,EAAE,OAI/BC,EAAcF,EAAQ,EAAE,EAG1B,KAAK,GAAKA,EAAQ,GAClB,KAAK,QAAU,CACb,QAAS,GACT,MAAO,GACP,WAAY,GACZ,MAAO,GACP,cAAe,GACf,GAAGA,CACL,EAGA,OAAO,KAAK,QAAQ,EACtB,CASO,mBAAoC,IACzC,OAAO,OAAW,IAOb,SAAmB,CACxB,OAAO,KAAK,QAAQ,SAAW,EACjC,CAcO,OAAOG,EAAmB,GAAMC,EAAuB,CAG5D,GAFA,KAAK,QAAQ,QAAUD,EAGrB,KAAK,mBAAmB,GACxBA,GACA,CAACE,EAAUD,CAAM,GACjB,KAAK,QAAQ,WAEb,GAAI,MAAM,QAAQ,KAAK,EAAE,EACvB,KAAK,GAAG,QAASE,GAAgC,CAC/C,IAAIC,EACA,OAAOD,GAAO,SAChBC,EAAgBC,EAAWF,EAAI,CAC7B,GAAG,KAAK,OACV,CAAsB,EAEtBC,EAAgBC,EAAWF,EAAG,GAAI,CAChC,GAAG,KAAK,QACR,YAAaA,EAAG,WAClB,CAAsB,EAExB,KAAK,eAAe,KAAKC,CAAa,CACxC,CAAC,MACI,CACL,IAAMA,EAAmCC,EAAW,KAAK,GAAI,CAC3D,GAAG,KAAK,OACV,CAAsB,EACtB,KAAK,eAAe,KAAKD,CAAa,CACxC,CAEJ,CAOO,cAAwB,CAC7B,OAAO,KAAK,QAAQ,OAAS,EAC/B,CAOO,MAAME,EAAuB,CAClC,KAAK,QAAQ,MAAQA,CACvB,CAQO,WAAuC,CAC5C,OAAI,KAAK,mBAAmB,GAAK,KAAK,QAAQ,QACpC,OAAO,UAAY,OAAO,WAAa,CAAC,EAE3C,EACT,CAcO,UACLC,EACAC,EACAC,EAA2C,CAAC,EACtC,CACN,IAAMC,EACJ,KAAK,mBAAmB,IAAM,KAAK,QAAQ,SAAW,IACpD,KAAK,QAAQ,OACf,QAAQ,IACN,eAAeA,EAAU,GAAK,YAAY,2BAC1C,CAAE,WAAAH,EAAY,KAAAC,CAAK,CACrB,EAGEE,IACoC,OAAO,UAC3C,OAAO,WAAa,CAAC,GACb,KAAK,CACb,GAAGD,EACH,MAAO,KAAK,QAAQ,wBAA0B,eAC9C,eAAgBD,EAChB,oBAAqBD,CACvB,CAAC,CAEL,CAkBO,WAAW,CAChB,MAAAI,EACA,SAAAC,EAAW,KACX,OAAAC,EAAS,KACT,MAAAC,EAAQ,KACR,MAAAC,EAAQ,KACR,eAAAC,EAAiB,GACjB,GAAGC,CACL,EAAuB,CAAC,EAAS,CAC/B,IAAMP,EACJ,KAAK,mBAAmB,IAAM,KAAK,QAAQ,SAAW,IACpD,KAAK,QAAQ,OACf,QAAQ,IACN,eAAeA,EAAU,GAAK,YAAY,uBAC1C,CACE,MAAAC,EACA,SAAAC,EACA,OAAAC,EACA,MAAAC,EACA,MAAAC,EACA,GAAGE,CACL,CACF,EAGEP,IACoC,OAAO,UAC3C,OAAO,WAAa,CAAC,GACb,KAAK,CACb,MAAOC,GAAS,cAChB,OAAQC,EACR,OAAQC,EACR,oBAAqBC,EACrB,MAAOC,EACP,mBAAoBC,EACpB,GAAGC,CACL,CAAC,CAEL,CAYO,KAAKC,EAA6B,CACvC,IAAMR,EACJ,KAAK,mBAAmB,IAAM,KAAK,QAAQ,SAAW,IACpD,KAAK,QAAQ,OACf,QAAQ,IACN,eAAeA,EAAU,GAAK,YAAY,uBAC1CQ,CACF,EAGER,IACoC,OAAO,UAC3C,OAAO,WAAa,CAAC,GACb,KAAKQ,CAAI,CAEvB,CACF","names":["src_exports","__export","GTM_ID_PATTERN","GtmSupport","assertIsGtmId","hasScript","loadScript","__toCommonJS","GTM_ID_PATTERN","assertIsGtmId","id","suggestion","suggestionText","loadScript","id","config","doc","script","scriptLoadListener","event","queryString","source","parentElement","hasScript","GtmSupport","options","idOrObject","assertIsGtmId","enabled","source","hasScript","id","scriptElement","loadScript","enable","screenName","path","additionalEventData","trigger","event","category","action","label","value","noninteraction","rest","data"]}