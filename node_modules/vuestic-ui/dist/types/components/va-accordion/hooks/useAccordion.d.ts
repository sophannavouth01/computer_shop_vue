import { Ref, WritableComputedRef } from 'vue';
export declare const AccordionServiceKey: unique symbol;
export interface AccordionItemProps {
    inset?: boolean;
    popout?: boolean;
}
export interface AccordionProps extends AccordionItemProps {
    modelValue: boolean[];
    multiple: boolean;
}
export type AccordionItem = {};
export interface AccordionInject {
    onItemMounted: (item: AccordionItem) => void;
    onItemUnmounted: (item: AccordionItem) => void;
    getItemValue: (item: AccordionItem) => boolean;
    setItemValue: (item: AccordionItem, value: boolean) => void;
    props: Ref<AccordionItemProps>;
}
/**
 * @param props
 * @param state array of states of all accordion items */
export declare const useAccordion: (props: AccordionProps, state: WritableComputedRef<boolean[]>) => {
    items: Ref<AccordionItem[]>;
};
/**
 * Hook used in items that should react on VaAccordion changes
 * @param state shows if accordion item is open
 */
export declare const useAccordionItem: () => {
    accordionProps: Ref<{
        modelValue: boolean[];
        multiple: boolean;
        inset?: boolean | undefined;
        popout?: boolean | undefined;
    }>;
    valueProxy?: undefined;
} | {
    valueProxy: WritableComputedRef<boolean>;
    accordionProps: Ref<AccordionItemProps>;
};
