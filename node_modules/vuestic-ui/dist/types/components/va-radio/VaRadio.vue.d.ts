import { PropType } from 'vue';
import type { VaRadioOption } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<any>;
        default: null;
    };
    options: {
        type: {
            (arrayLength: number): any[];
            (...items: any[]): any[];
            new (arrayLength: number): any[];
            new (...items: any[]): any[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        default: () => never[];
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    option: {
        type: PropType<any>;
        default: undefined;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    textBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    arrayValue: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    trueValue: {
        type: null;
        default: boolean;
    };
    falseValue: {
        type: null;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminateValue: {
        type: PropType<unknown>;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    flexDirection: import("vue").ComputedRef<"column" | "row">;
    getDisabled: (option: import("../../composables").SelectableOption) => boolean;
    isChecked: (option: VaRadioOption) => any;
    computedOptions: import("vue").ComputedRef<any[]>;
    radioClass: (option: VaRadioOption) => {
        'va-radio--left-label': boolean;
        'va-radio--selected': any;
        'va-radio--readonly': boolean;
        'va-radio--disabled': boolean;
        'va-radio--indeterminate': boolean;
        'va-radio--error': boolean;
        'va-radio--single-option': boolean;
    };
    labelStyle: import("vue").ComputedRef<{
        color: string;
    }>;
    inputStyle: import("vue").ComputedRef<{
        background: string;
        borderColor: string;
    }>;
    computedError: import("vue").ComputedRef<boolean>;
    computedErrorMessages: import("vue").ComputedRef<string[]>;
    iconBackgroundComputedStyles: import("vue").ComputedRef<{
        backgroundColor: string;
    }>;
    iconDotComputedStyles: import("vue").ComputedRef<{
        borderColor: string;
        backgroundColor: string;
    }>;
    iconComputedStyles: import("vue").ComputedRef<{
        borderColor: string;
    }>;
    selectOption: (option: any, event?: any) => void;
    onFocus: (event: FocusEvent) => void;
    onBlur: (event: FocusEvent) => void;
    inputAttributesComputed: (option: any) => {
        name: string;
        disabled: boolean;
        readonly: boolean;
        tabindex: number;
    };
    computedName: import("vue").ComputedRef<string>;
    roleComputed: import("vue").ComputedRef<"" | "radiogroup">;
    getText: (option: import("../../composables").SelectableOption) => string;
    getValue: (option: import("../../composables").SelectableOption) => any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<any>;
        default: null;
    };
    options: {
        type: {
            (arrayLength: number): any[];
            (...items: any[]): any[];
            new (arrayLength: number): any[];
            new (...items: any[]): any[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        default: () => never[];
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    option: {
        type: PropType<any>;
        default: undefined;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    textBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    arrayValue: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    trueValue: {
        type: null;
        default: boolean;
    };
    falseValue: {
        type: null;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminateValue: {
        type: PropType<unknown>;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    modelValue: any;
    stateful: boolean;
    vertical: boolean;
    color: string;
    success: boolean;
    indeterminate: boolean;
    error: boolean;
    loading: boolean;
    options: any[];
    disabled: boolean;
    label: string;
    readonly: boolean;
    option: any;
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
    messages: string | string[];
    dirty: boolean;
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<any>[];
    immediateValidation: boolean;
    indeterminateValue: null;
    arrayValue: string | number | boolean | Record<string, any>;
    leftLabel: boolean;
    trueValue: any;
    falseValue: any;
}, {}>;
export default _default;
