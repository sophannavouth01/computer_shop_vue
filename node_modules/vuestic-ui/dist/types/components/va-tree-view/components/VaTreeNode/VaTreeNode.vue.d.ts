import { PropType } from 'vue';
import { TreeNode } from '../../types';
declare const _default: import("vue").DefineComponent<{
    node: {
        type: PropType<TreeNode>;
        required: true;
    };
}, {
    selectable: boolean;
    expandNodeBy: "leaf" | "node";
    getText: (node: TreeNode) => string;
    getTrackBy: (node: TreeNode) => string;
    toggleNode: (node: TreeNode) => void;
    onNodeClick: (type: "leaf" | "node") => void;
    handleKeyboardNavigation: (event: KeyboardEvent, node: TreeNode) => void;
    toggleCheckbox: (node: TreeNode, state: boolean | null) => void;
    roleComputed: import("vue").ComputedRef<"group" | "treeitem">;
    iconComputed: import("vue").ComputedRef<any>;
    labelComputed: import("vue").ComputedRef<string>;
    colorComputed: import("vue").ComputedRef<string>;
    tabIndexComputed: import("vue").ComputedRef<0 | -1>;
    indentClassComputed: {
        "va-tree-node-content--indent": boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-tree-node-content--indent": boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<"va-tree-node-content--indent"[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    isExpandedComputed: import("vue").ComputedRef<boolean | undefined>;
    expandedClassComputed: {
        "va-tree-node-children--expanded": boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-tree-node-children--expanded": boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<"va-tree-node-children--expanded"[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    treeNodeClassComputed: {
        [x: `va-tree-node--${string}`]: boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-tree-node--${string}`]: boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-tree-node--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    cursorClassComputed: {
        "va-tree-node-content--clickable": boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-tree-node-content--clickable": boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<"va-tree-node-content--clickable"[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    node: {
        type: PropType<TreeNode>;
        required: true;
    };
}>>, {}, {}>;
export default _default;
