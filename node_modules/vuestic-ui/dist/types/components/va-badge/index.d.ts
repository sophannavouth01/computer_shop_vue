export declare const VaBadge: import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    text: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    multiLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    visibleEmpty: {
        type: BooleanConstructor;
        default: boolean;
    };
    dot: {
        type: BooleanConstructor;
        default: boolean;
    };
    transparent: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlap: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    offset: {
        type: import("vue").PropType<import("./types").BadgeOffsetProp>;
        default: number;
        validator: (value: "toString") => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    badgeClass: {
        "va-badge--multiLine": boolean | undefined;
        "va-badge--visibleEmpty": boolean | undefined;
        "va-badge--dot": boolean | undefined;
        "va-badge--empty": boolean | undefined;
        "va-badge--floating": boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-badge--multiLine": boolean | undefined;
            "va-badge--visibleEmpty": boolean | undefined;
            "va-badge--dot": boolean | undefined;
            "va-badge--empty": boolean | undefined;
            "va-badge--floating": boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<("va-badge--multiLine" | "va-badge--visibleEmpty" | "va-badge--dot" | "va-badge--empty" | "va-badge--floating")[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    stylesComputed: import("vue").ComputedRef<{
        color: string;
        borderColor: string;
        backgroundColor: string;
        opacity: number;
    }>;
    ariaLabelledByComputed: import("vue").ComputedRef<string | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    text: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    multiLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    visibleEmpty: {
        type: BooleanConstructor;
        default: boolean;
    };
    dot: {
        type: BooleanConstructor;
        default: boolean;
    };
    transparent: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlap: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    offset: {
        type: import("vue").PropType<import("./types").BadgeOffsetProp>;
        default: number;
        validator: (value: "toString") => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    preset: string;
    color: string;
    transparent: boolean;
    text: string | number;
    multiLine: boolean;
    visibleEmpty: boolean;
    dot: boolean;
    overlap: boolean;
    placement: import("../../composables").PlacementWithAlias;
    offset: import("./types").BadgeOffsetProp;
}, {}>;
