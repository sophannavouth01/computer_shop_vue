import { PropType, Ref, ExtractPropTypes, ComputedRef } from 'vue';
import type { DataTableColumnInternal, DataTableRow, DataTableItem, DataTableSortingOrder } from '../types';
export declare const useSortableProps: {
    sortBy: {
        type: PropType<string | undefined>;
    };
    columnSorted: {
        type: PropType<any>;
    };
    sortingOrder: {
        type: PropType<DataTableSortingOrder | undefined>;
    };
    disableClientSideSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
};
export type TSortedArgs = {
    sortBy: string;
    sortingOrder: DataTableSortingOrder;
    items: DataTableItem[];
    itemsIndexes: number[];
};
export type TSortableEmits = ((event: 'update:sortBy' | 'update:sortingOrder' | 'sorted', args: string | DataTableSortingOrder | TSortedArgs) => void) & ((event: 'columnSorted', args: {
    columnName: string;
    value: DataTableSortingOrder;
    column: DataTableColumnInternal;
}) => void);
export type TSortIcon = 'va-arrow-up' | 'va-arrow-down' | 'unfold_more';
export declare const useSortable: (columns: Ref<DataTableColumnInternal[]>, filteredRows: Ref<DataTableRow[]>, props: ExtractPropTypes<typeof useSortableProps>, emit: TSortableEmits) => {
    sortBySync: import("vue").WritableComputedRef<string>;
    sortingOrderSync: import("vue").WritableComputedRef<DataTableSortingOrder>;
    toggleSorting: (this: any, ...args: any[]) => void;
    sortedRows: ComputedRef<DataTableRow[]>;
    sortingOrderIconName: ComputedRef<TSortIcon>;
};
