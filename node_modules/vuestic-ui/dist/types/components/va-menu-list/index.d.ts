export declare const VaMenuList: import("vue").DefineComponent<{
    options: {
        type: import("vue").PropType<import("./types").VaMenuOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
}, {
    container: import("vue").Ref<HTMLElement | undefined>;
    optionGroups: import("vue").ComputedRef<Record<string, import("./types").VaMenuOption[]>>;
    makeMenuContainerAttributes: () => {
        role: string;
        tabindex: number;
    };
    getVNodeComponentName: (node: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) => string;
    getUnSlottedVNodes: (nodes: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[];
    getVNodeKey: (node: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>) => string;
    getText: (option: import("..").SelectOption) => string;
    getValue: (option: import("..").SelectOption) => any;
    getDisabled: (option: import("..").SelectOption) => boolean;
    getTrackBy: (option: import("..").SelectOption) => string | number;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "selected"[], "selected", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: import("vue").PropType<import("./types").VaMenuOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
}>> & {
    onSelected?: ((...args: any[]) => any) | undefined;
}, {
    options: import("./types").VaMenuOption[];
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
}, {}>;
export declare const VaMenuItem: import("vue").DefineComponent<{
    name: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        defatult: string;
    };
    rightIcon: {
        type: StringConstructor;
        defatult: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    hasKeyboardFocus: import("vue").Ref<boolean>;
    keyboardFocusListeners: {
        focus: () => void;
        blur: () => void;
    };
    makeMenuItemAttributes: (options: {
        disabled?: boolean | undefined;
    }) => {
        role: string;
        tabindex: number;
        'aria-disabled': boolean;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "selected"[], "selected", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        defatult: string;
    };
    rightIcon: {
        type: StringConstructor;
        defatult: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onSelected?: ((...args: any[]) => any) | undefined;
}, {
    name: string;
    disabled: boolean;
}, {}>;
export declare const VaMenuGroup: import("vue").DefineComponent<{
    groupName: {
        type: StringConstructor;
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    colorComputed: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    groupName: {
        type: StringConstructor;
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    color: string;
}, {}>;
