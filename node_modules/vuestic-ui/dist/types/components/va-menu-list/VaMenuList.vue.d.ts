import { PropType, VNode } from 'vue';
import { VaMenuOption } from './types';
declare const _default: import("vue").DefineComponent<{
    options: {
        type: PropType<VaMenuOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
}, {
    container: import("vue").Ref<HTMLElement | undefined>;
    optionGroups: import("vue").ComputedRef<Record<string, VaMenuOption[]>>;
    makeMenuContainerAttributes: () => {
        role: string;
        tabindex: number;
    };
    getVNodeComponentName: (node: VNode) => string;
    getUnSlottedVNodes: (nodes: VNode[]) => VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[];
    getVNodeKey: (node: VNode) => string;
    getText: (option: import("../../composables").SelectableOption) => string;
    getValue: (option: import("../../composables").SelectableOption) => any;
    getDisabled: (option: import("../../composables").SelectableOption) => boolean;
    getTrackBy: (option: import("../../composables").SelectableOption) => string | number;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "selected"[], "selected", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: PropType<VaMenuOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
}>> & {
    onSelected?: ((...args: any[]) => any) | undefined;
}, {
    options: VaMenuOption[];
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
}, {}>;
export default _default;
