export declare const VaDropdown: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    anchor: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    innerAnchorSelector: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
    readonly: {
        type: BooleanConstructor;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnFocusOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<import("./types").DropdownOffsetProp>;
        default: number;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    verticalScrollOnOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean | import("./types").CursorAnchor>;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    teleport: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    keyboardNavigation: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    role: {
        type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
}, {
    anchorRef: import("vue").WritableComputedRef<HTMLElement | undefined>;
    anchorClass: {
        "va-dropdown--disabled": boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-dropdown--disabled": boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<"va-dropdown--disabled"[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    floating: import("vue").Ref<HTMLElement | undefined>;
    floatingStyles: import("vue").ComputedRef<{
        position: import("@floating-ui/core").Strategy;
        top: string;
        left: string;
        transform?: string | undefined;
        willChange?: string | undefined;
    } | {
        position: string;
    } | undefined>;
    teleportDisabled: import("vue").ComputedRef<boolean>;
    showFloating: import("vue").ComputedRef<boolean>;
    teleportTarget: import("vue").ComputedRef<HTMLElement | undefined>;
    floatingListeners: {
        onMouseover: () => false | void;
        onMouseout: () => void;
        onClick: () => void;
    };
    isMounted: import("vue").Ref<boolean>;
    valueComputed: import("vue").WritableComputedRef<boolean>;
    hide: () => void;
    show: () => void;
    zIndex: import("vue").ComputedRef<number>;
    teleportFromAttrs: {
        "data-va-teleported-from": string;
    };
    teleportedAttrs: {
        "data-va-teleported": string;
    };
    findTeleportedFrom: (el: HTMLElement | null | undefined) => HTMLElement | null;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "close" | "anchor-click" | "anchor-right-click" | "content-click" | "click-outside" | "focus-outside" | "open" | "anchor-dblclick")[], "update:modelValue" | "close" | "anchor-click" | "anchor-right-click" | "content-click" | "click-outside" | "focus-outside" | "open" | "anchor-dblclick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    anchor: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    innerAnchorSelector: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
    readonly: {
        type: BooleanConstructor;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnFocusOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<import("./types").DropdownOffsetProp>;
        default: number;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    verticalScrollOnOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean | import("./types").CursorAnchor>;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    teleport: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    keyboardNavigation: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    role: {
        type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onAnchor-click"?: ((...args: any[]) => any) | undefined;
    "onAnchor-right-click"?: ((...args: any[]) => any) | undefined;
    "onContent-click"?: ((...args: any[]) => any) | undefined;
    "onClick-outside"?: ((...args: any[]) => any) | undefined;
    "onFocus-outside"?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    "onAnchor-dblclick"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: boolean;
    stateful: boolean;
    target: import("../../composables").MaybeHTMLElementOrSelector;
    role: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">;
    ariaLabel: string;
    anchor: import("../../composables").MaybeHTMLElementOrSelector;
    disabled: boolean;
    placement: import("../../composables").PlacementWithAlias;
    offset: import("./types").DropdownOffsetProp;
    anchorSelector: string;
    innerAnchorSelector: string;
    trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
    readonly: boolean;
    closeOnClickOutside: boolean;
    closeOnFocusOutside: boolean;
    closeOnAnchorClick: boolean;
    closeOnContentClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    isContentHoverable: boolean;
    keepAnchorWidth: boolean;
    verticalScrollOnOverflow: boolean;
    cursor: boolean | import("./types").CursorAnchor;
    autoPlacement: boolean;
    stickToEdges: boolean;
    teleport: import("../../composables").MaybeHTMLElementOrSelector;
    keyboardNavigation: boolean;
}, {}>;
export { VaDropdownContent } from './components/VaDropdownContent';
