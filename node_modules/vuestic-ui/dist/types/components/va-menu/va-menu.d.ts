export declare const VaMenu: import("vue").DefineComponent<{
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    anchor: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
    };
    placement: {
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    offset: {
        type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
        default: number;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    innerAnchorSelector: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    readonly: {
        type: BooleanConstructor;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnFocusOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    verticalScrollOnOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean | import("../va-dropdown/types").CursorAnchor>;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    keyboardNavigation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: import("vue").PropType<import("../va-menu-list/types").VaMenuOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    onKeydown: (event: KeyboardEvent) => void;
    dropdown: import("vue").Ref<import("vue").DefineComponent<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        anchor: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            default: undefined;
        };
        anchorSelector: {
            type: StringConstructor;
            default: string;
        };
        innerAnchorSelector: {
            type: StringConstructor;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
            default: string;
            validator: (value: string) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
        };
        readonly: {
            type: BooleanConstructor;
        };
        closeOnClickOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnFocusOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnAnchorClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        hoverOverTimeout: {
            type: NumberConstructor;
            default: number;
        };
        hoverOutTimeout: {
            type: NumberConstructor;
            default: number;
        };
        isContentHoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
            default: number;
        };
        keepAnchorWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        verticalScrollOnOverflow: {
            type: BooleanConstructor;
            default: boolean;
        };
        cursor: {
            type: import("vue").PropType<boolean | import("../va-dropdown/types").CursorAnchor>;
            default: boolean;
        };
        autoPlacement: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickToEdges: {
            type: BooleanConstructor;
            default: boolean;
        };
        target: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            default: undefined;
        };
        teleport: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            default: undefined;
        };
        keyboardNavigation: {
            type: BooleanConstructor;
            default: boolean;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        role: {
            type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
            default: string;
            validator: (position: import("../../composables").PlacementWithAlias) => boolean;
        };
    }, {
        anchorRef: import("vue").WritableComputedRef<HTMLElement | undefined>;
        anchorClass: {
            "va-dropdown--disabled": boolean | undefined;
        } & {
            readonly asObject: import("vue").ComputedRef<{
                "va-dropdown--disabled": boolean | undefined;
            }>;
            readonly asArray: import("vue").ComputedRef<"va-dropdown--disabled"[]>;
            readonly asString: import("vue").ComputedRef<string>;
        };
        floating: import("vue").Ref<HTMLElement | undefined>;
        floatingStyles: import("vue").ComputedRef<{
            position: import("@floating-ui/core").Strategy;
            top: string;
            left: string;
            transform?: string | undefined;
            willChange?: string | undefined;
        } | {
            position: string;
        } | undefined>;
        teleportDisabled: import("vue").ComputedRef<boolean>;
        showFloating: import("vue").ComputedRef<boolean>;
        teleportTarget: import("vue").ComputedRef<HTMLElement | undefined>;
        floatingListeners: {
            onMouseover: () => false | void;
            onMouseout: () => void;
            onClick: () => void;
        };
        isMounted: import("vue").Ref<boolean>;
        valueComputed: import("vue").WritableComputedRef<boolean>;
        hide: () => void;
        show: () => void;
        zIndex: import("vue").ComputedRef<number>;
        teleportFromAttrs: {
            "data-va-teleported-from": string;
        };
        teleportedAttrs: {
            "data-va-teleported": string;
        };
        findTeleportedFrom: (el: HTMLElement | null | undefined) => HTMLElement | null;
        tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
        t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "close" | "anchor-click" | "anchor-right-click" | "content-click" | "click-outside" | "focus-outside" | "open" | "anchor-dblclick")[], "update:modelValue" | "close" | "anchor-click" | "anchor-right-click" | "content-click" | "click-outside" | "focus-outside" | "open" | "anchor-dblclick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        anchor: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            default: undefined;
        };
        anchorSelector: {
            type: StringConstructor;
            default: string;
        };
        innerAnchorSelector: {
            type: StringConstructor;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
            default: string;
            validator: (value: string) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
        };
        readonly: {
            type: BooleanConstructor;
        };
        closeOnClickOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnFocusOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnAnchorClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        hoverOverTimeout: {
            type: NumberConstructor;
            default: number;
        };
        hoverOutTimeout: {
            type: NumberConstructor;
            default: number;
        };
        isContentHoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
            default: number;
        };
        keepAnchorWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        verticalScrollOnOverflow: {
            type: BooleanConstructor;
            default: boolean;
        };
        cursor: {
            type: import("vue").PropType<boolean | import("../va-dropdown/types").CursorAnchor>;
            default: boolean;
        };
        autoPlacement: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickToEdges: {
            type: BooleanConstructor;
            default: boolean;
        };
        target: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            default: undefined;
        };
        teleport: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            default: undefined;
        };
        keyboardNavigation: {
            type: BooleanConstructor;
            default: boolean;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        role: {
            type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
            default: string;
            validator: (position: import("../../composables").PlacementWithAlias) => boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onAnchor-click"?: ((...args: any[]) => any) | undefined;
        "onAnchor-right-click"?: ((...args: any[]) => any) | undefined;
        "onContent-click"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        "onFocus-outside"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onAnchor-dblclick"?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: boolean;
        stateful: boolean;
        target: import("../../composables").MaybeHTMLElementOrSelector;
        role: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">;
        ariaLabel: string;
        anchor: import("../../composables").MaybeHTMLElementOrSelector;
        disabled: boolean;
        placement: import("../../composables").PlacementWithAlias;
        offset: import("../va-dropdown/types").DropdownOffsetProp;
        anchorSelector: string;
        innerAnchorSelector: string;
        trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
        readonly: boolean;
        closeOnClickOutside: boolean;
        closeOnFocusOutside: boolean;
        closeOnAnchorClick: boolean;
        closeOnContentClick: boolean;
        hoverOverTimeout: number;
        hoverOutTimeout: number;
        isContentHoverable: boolean;
        keepAnchorWidth: boolean;
        verticalScrollOnOverflow: boolean;
        cursor: boolean | import("../va-dropdown/types").CursorAnchor;
        autoPlacement: boolean;
        stickToEdges: boolean;
        teleport: import("../../composables").MaybeHTMLElementOrSelector;
        keyboardNavigation: boolean;
    }, {}> | undefined>;
    menuList: import("vue").Ref<HTMLElement | undefined>;
    menuListProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
        options: {
            type: import("vue").PropType<import("../va-menu-list/types").VaMenuOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
    }, "">>>;
    dropdownProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        anchor: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            default: undefined;
        };
        anchorSelector: {
            type: StringConstructor;
            default: string;
        };
        innerAnchorSelector: {
            type: StringConstructor;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
            default: string;
            validator: (value: string) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
        };
        readonly: {
            type: BooleanConstructor;
        };
        closeOnClickOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnFocusOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnAnchorClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        hoverOverTimeout: {
            type: NumberConstructor;
            default: number;
        };
        hoverOutTimeout: {
            type: NumberConstructor;
            default: number;
        };
        isContentHoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
            default: number;
        };
        keepAnchorWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        verticalScrollOnOverflow: {
            type: BooleanConstructor;
            default: boolean;
        };
        cursor: {
            type: import("vue").PropType<boolean | import("../va-dropdown/types").CursorAnchor>;
            default: boolean;
        };
        autoPlacement: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickToEdges: {
            type: BooleanConstructor;
            default: boolean;
        };
        target: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            default: undefined;
        };
        teleport: {
            type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
            default: undefined;
        };
        keyboardNavigation: {
            type: BooleanConstructor;
            default: boolean;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        role: {
            type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
            default: string;
            validator: (position: import("../../composables").PlacementWithAlias) => boolean;
        };
    }, "">>>;
    close: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "close" | "anchor-click" | "anchor-right-click" | "content-click" | "click-outside" | "focus-outside" | "open" | "anchor-dblclick" | "selected")[], "update:modelValue" | "close" | "anchor-click" | "anchor-right-click" | "content-click" | "click-outside" | "focus-outside" | "open" | "anchor-dblclick" | "selected", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    anchor: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
    };
    placement: {
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    offset: {
        type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
        default: number;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    innerAnchorSelector: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    readonly: {
        type: BooleanConstructor;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnFocusOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    verticalScrollOnOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean | import("../va-dropdown/types").CursorAnchor>;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    keyboardNavigation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: import("vue").PropType<import("../va-menu-list/types").VaMenuOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onAnchor-click"?: ((...args: any[]) => any) | undefined;
    "onAnchor-right-click"?: ((...args: any[]) => any) | undefined;
    "onContent-click"?: ((...args: any[]) => any) | undefined;
    "onClick-outside"?: ((...args: any[]) => any) | undefined;
    "onFocus-outside"?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    "onAnchor-dblclick"?: ((...args: any[]) => any) | undefined;
    onSelected?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    modelValue: boolean;
    stateful: boolean;
    target: import("../../composables").MaybeHTMLElementOrSelector;
    role: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">;
    ariaLabel: string;
    anchor: import("../../composables").MaybeHTMLElementOrSelector;
    options: import("../va-menu-list/types").VaMenuOption[];
    disabled: boolean;
    placement: import("../../composables").PlacementWithAlias;
    offset: import("../va-dropdown/types").DropdownOffsetProp;
    anchorSelector: string;
    innerAnchorSelector: string;
    trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
    readonly: boolean;
    closeOnClickOutside: boolean;
    closeOnFocusOutside: boolean;
    closeOnAnchorClick: boolean;
    closeOnContentClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    isContentHoverable: boolean;
    keepAnchorWidth: boolean;
    verticalScrollOnOverflow: boolean;
    cursor: boolean | import("../va-dropdown/types").CursorAnchor;
    autoPlacement: boolean;
    stickToEdges: boolean;
    teleport: import("../../composables").MaybeHTMLElementOrSelector;
    keyboardNavigation: boolean;
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
}, {}>;
