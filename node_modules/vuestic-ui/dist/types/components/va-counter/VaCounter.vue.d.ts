import { InputHTMLAttributes, ComputedRef } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: NumberConstructor;
        default: undefined;
    };
    max: {
        type: NumberConstructor;
        default: undefined;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    increaseIcon: {
        type: StringConstructor;
        default: string;
    };
    decreaseIcon: {
        type: StringConstructor;
        default: string;
    };
    buttons: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    margins: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    longPressDelay: {
        type: NumberConstructor;
        default: number;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaDecreaseLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaIncreaseLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    background: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    counter: {
        type: BooleanConstructor;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    input: import("vue").ShallowRef<HTMLInputElement | HTMLDivElement | undefined>;
    valueComputed: import("vue").WritableComputedRef<string | number>;
    isFocused: import("vue").WritableComputedRef<boolean>;
    computedError: ComputedRef<boolean>;
    computedErrorMessages: ComputedRef<string[]>;
    fieldListeners: Record<string, any>;
    inputListeners: Record<string, any>;
    inputWrapperPropsComputed: ComputedRef<import("vue").ExtractPropTypes<Omit<{
        modelValue: {
            type: null;
            default: string;
        };
        counter: {
            type: BooleanConstructor;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        innerLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputAriaLabel: {
            type: StringConstructor;
            default: string;
        };
        inputAriaLabelledby: {
            type: StringConstructor;
        };
        inputAriaDescribedby: {
            type: StringConstructor;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }, "">>>;
    inputAttributesComputed: ComputedRef<InputHTMLAttributes>;
    setCountInput: ({ target }: Event) => void;
    setCountChange: ({ target }: Event) => void;
    decreaseCount: () => void;
    increaseCount: () => void;
    decreaseIconProps: ComputedRef<{
        onClick?: (() => void) | undefined;
        class: {
            'va-counter__icon--inactive': boolean;
        };
        color: string;
        icon: string;
        plain: boolean;
        disabled: boolean;
        readonly: boolean;
        tabindex: number;
        'aria-label': string;
    }>;
    increaseIconProps: ComputedRef<{
        onClick?: (() => void) | undefined;
        class: {
            'va-counter__icon--inactive': boolean;
        };
        color: string;
        icon: string;
        plain: boolean;
        disabled: boolean;
        readonly: boolean;
        tabindex: number;
        'aria-label': string;
    }>;
    decreaseButtonProps: ComputedRef<{
        onClick?: (() => void) | undefined;
        icon: string;
        disabled: boolean;
        'aria-label': string;
        round: boolean;
        preset: string;
        borderColor: string;
        flat?: boolean | undefined;
        modelValue?: string | number | undefined;
        stateful?: boolean | undefined;
        color?: string | undefined;
        success?: boolean | undefined;
        ariaLabel?: string | undefined;
        loading?: boolean | undefined;
        label?: string | undefined;
        readonly?: boolean | undefined;
        step?: number | undefined;
        placeholder?: string | undefined;
        messages?: string | string[] | undefined;
        dirty?: boolean | undefined;
        errorCount?: string | number | undefined;
        immediateValidation?: boolean | undefined;
        requiredMark?: boolean | undefined;
        counter?: boolean | undefined;
        innerLabel?: boolean | undefined;
        inputAriaLabel?: string | undefined;
        clearable?: boolean | undefined;
        clearableIcon?: string | undefined;
        clearValue?: string | undefined;
        manualInput?: boolean | undefined;
        increaseIcon?: string | undefined;
        decreaseIcon?: string | undefined;
        buttons?: boolean | undefined;
        rounded?: boolean | undefined;
        margins?: string | number | undefined;
        longPressDelay?: number | undefined;
        ariaDecreaseLabel?: string | undefined;
        ariaIncreaseLabel?: string | undefined;
        name?: string | undefined;
        error?: boolean | undefined;
        max?: number | undefined;
        background?: string | undefined;
        errorMessages?: string | string[] | undefined;
        rules?: import("../../composables").ValidationRule<any>[] | undefined;
        maxLength?: number | undefined;
        inputAriaLabelledby?: string | undefined;
        inputAriaDescribedby?: string | undefined;
        min?: number | undefined;
    }>;
    increaseButtonProps: ComputedRef<{
        onClick?: (() => void) | undefined;
        icon: string;
        disabled: boolean;
        'aria-label': string;
        round: boolean;
        preset: string;
        borderColor: string;
        flat?: boolean | undefined;
        modelValue?: string | number | undefined;
        stateful?: boolean | undefined;
        color?: string | undefined;
        success?: boolean | undefined;
        ariaLabel?: string | undefined;
        loading?: boolean | undefined;
        label?: string | undefined;
        readonly?: boolean | undefined;
        step?: number | undefined;
        placeholder?: string | undefined;
        messages?: string | string[] | undefined;
        dirty?: boolean | undefined;
        errorCount?: string | number | undefined;
        immediateValidation?: boolean | undefined;
        requiredMark?: boolean | undefined;
        counter?: boolean | undefined;
        innerLabel?: boolean | undefined;
        inputAriaLabel?: string | undefined;
        clearable?: boolean | undefined;
        clearableIcon?: string | undefined;
        clearValue?: string | undefined;
        manualInput?: boolean | undefined;
        increaseIcon?: string | undefined;
        decreaseIcon?: string | undefined;
        buttons?: boolean | undefined;
        rounded?: boolean | undefined;
        margins?: string | number | undefined;
        longPressDelay?: number | undefined;
        ariaDecreaseLabel?: string | undefined;
        ariaIncreaseLabel?: string | undefined;
        name?: string | undefined;
        error?: boolean | undefined;
        max?: number | undefined;
        background?: string | undefined;
        errorMessages?: string | string[] | undefined;
        rules?: import("../../composables").ValidationRule<any>[] | undefined;
        maxLength?: number | undefined;
        inputAriaLabelledby?: string | undefined;
        inputAriaDescribedby?: string | undefined;
        min?: number | undefined;
    }>;
    colorComputed: ComputedRef<string>;
    classComputed: ComputedRef<unknown[]>;
    styleComputed: ComputedRef<Partial<CSSStyleDeclaration>>;
    marginComputed: ComputedRef<string>;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: NumberConstructor;
        default: undefined;
    };
    max: {
        type: NumberConstructor;
        default: undefined;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    increaseIcon: {
        type: StringConstructor;
        default: string;
    };
    decreaseIcon: {
        type: StringConstructor;
        default: string;
    };
    buttons: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    margins: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    longPressDelay: {
        type: NumberConstructor;
        default: number;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaDecreaseLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaIncreaseLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    background: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    counter: {
        type: BooleanConstructor;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    flat: boolean;
    preset: string;
    name: string;
    modelValue: string | number;
    stateful: boolean;
    color: string;
    success: boolean;
    ariaLabel: string;
    error: boolean;
    loading: boolean;
    max: number;
    disabled: boolean;
    label: string;
    readonly: boolean;
    step: number;
    placeholder: string;
    messages: string | string[];
    dirty: boolean;
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<any>[];
    immediateValidation: boolean;
    requiredMark: boolean;
    counter: boolean;
    maxLength: number;
    innerLabel: boolean;
    inputAriaLabel: string;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
    min: number;
    manualInput: boolean;
    increaseIcon: string;
    decreaseIcon: string;
    buttons: boolean;
    rounded: boolean;
    margins: string | number;
    longPressDelay: number;
    ariaDecreaseLabel: string;
    ariaIncreaseLabel: string;
}, {}>;
export default _default;
