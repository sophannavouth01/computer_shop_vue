declare const createVaModalPlugin: (app: App<any>) => {
    init(options: string | Partial<Omit<Partial<{
        modelValue: boolean;
        stateful: boolean;
        size: "small" | "medium" | "large";
        title: string;
        maxWidth: string;
        backgroundColor: string;
        blur: boolean;
        zIndex: string | number;
        noPadding: boolean;
        ariaCloseLabel: string;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        message: string;
        okText: string;
        cancelText: string;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        closeButton: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        showNestedOverlay: boolean;
    }> & Omit<{
        readonly modelValue: boolean;
        readonly stateful: boolean;
        readonly size: "small" | "medium" | "large";
        readonly title: string;
        readonly maxWidth: string;
        readonly backgroundColor: string;
        readonly blur: boolean;
        readonly noPadding: boolean;
        readonly ariaCloseLabel: string;
        readonly attachElement: string;
        readonly allowBodyScroll: boolean;
        readonly disableAttachment: boolean;
        readonly message: string;
        readonly okText: string;
        readonly cancelText: string;
        readonly hideDefaultActions: boolean;
        readonly fullscreen: boolean;
        readonly closeButton: boolean;
        readonly mobileFullscreen: boolean;
        readonly noDismiss: boolean;
        readonly noOutsideDismiss: boolean;
        readonly noEscDismiss: boolean;
        readonly maxHeight: string;
        readonly fixedLayout: boolean;
        readonly withoutTransitions: boolean;
        readonly overlay: boolean;
        readonly overlayOpacity: string | number;
        readonly showNestedOverlay: boolean;
        readonly anchorClass?: string | undefined;
        readonly zIndex?: string | number | undefined;
        readonly beforeClose?: ((hide: () => void) => any) | undefined;
        readonly beforeOk?: ((hide: () => void) => any) | undefined;
        readonly beforeCancel?: ((hide: () => void) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
    } & VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly<ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: StringConstructor;
            default: string;
        };
        cancelText: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
    }, "modelValue" | "stateful" | "size" | "title" | "maxWidth" | "backgroundColor" | "blur" | "zIndex" | "noPadding" | "ariaCloseLabel" | "attachElement" | "allowBodyScroll" | "disableAttachment" | "message" | "okText" | "cancelText" | "hideDefaultActions" | "fullscreen" | "closeButton" | "mobileFullscreen" | "noDismiss" | "noOutsideDismiss" | "noEscDismiss" | "maxHeight" | "fixedLayout" | "withoutTransitions" | "overlay" | "overlayOpacity" | "showNestedOverlay"> & import("../types").ModalEmits, "anchorClass">>): VNode<RendererNode, RendererElement, {
        [key: string]: any;
    }>;
    confirm(options: string | Partial<Omit<Partial<{
        modelValue: boolean;
        stateful: boolean;
        size: "small" | "medium" | "large";
        title: string;
        maxWidth: string;
        backgroundColor: string;
        blur: boolean;
        zIndex: string | number;
        noPadding: boolean;
        ariaCloseLabel: string;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        message: string;
        okText: string;
        cancelText: string;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        closeButton: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        showNestedOverlay: boolean;
    }> & Omit<{
        readonly modelValue: boolean;
        readonly stateful: boolean;
        readonly size: "small" | "medium" | "large";
        readonly title: string;
        readonly maxWidth: string;
        readonly backgroundColor: string;
        readonly blur: boolean;
        readonly noPadding: boolean;
        readonly ariaCloseLabel: string;
        readonly attachElement: string;
        readonly allowBodyScroll: boolean;
        readonly disableAttachment: boolean;
        readonly message: string;
        readonly okText: string;
        readonly cancelText: string;
        readonly hideDefaultActions: boolean;
        readonly fullscreen: boolean;
        readonly closeButton: boolean;
        readonly mobileFullscreen: boolean;
        readonly noDismiss: boolean;
        readonly noOutsideDismiss: boolean;
        readonly noEscDismiss: boolean;
        readonly maxHeight: string;
        readonly fixedLayout: boolean;
        readonly withoutTransitions: boolean;
        readonly overlay: boolean;
        readonly overlayOpacity: string | number;
        readonly showNestedOverlay: boolean;
        readonly anchorClass?: string | undefined;
        readonly zIndex?: string | number | undefined;
        readonly beforeClose?: ((hide: () => void) => any) | undefined;
        readonly beforeOk?: ((hide: () => void) => any) | undefined;
        readonly beforeCancel?: ((hide: () => void) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
    } & VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly<ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: StringConstructor;
            default: string;
        };
        cancelText: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
    }, "modelValue" | "stateful" | "size" | "title" | "maxWidth" | "backgroundColor" | "blur" | "zIndex" | "noPadding" | "ariaCloseLabel" | "attachElement" | "allowBodyScroll" | "disableAttachment" | "message" | "okText" | "cancelText" | "hideDefaultActions" | "fullscreen" | "closeButton" | "mobileFullscreen" | "noDismiss" | "noOutsideDismiss" | "noEscDismiss" | "maxHeight" | "fixedLayout" | "withoutTransitions" | "overlay" | "overlayOpacity" | "showNestedOverlay"> & import("../types").ModalEmits, "anchorClass">>): Promise<boolean>;
};
export declare const VaModalPlugin: import("../../../services/vue-plugin/types").VuesticPluginFabric<[]>;
declare module '@vue/runtime-core' {
    interface ComponentCustomProperties {
        $vaModal: ReturnType<typeof createVaModalPlugin>;
    }
}
export {};
