import { PropType } from 'vue';
import type { SelectOption } from '../../types';
declare const _default: import("vue").DefineComponent<{
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    getSelectedState: {
        type: PropType<(option: SelectOption) => boolean>;
        required: true;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    hoveredOption: {
        type: PropType<SelectOption | null>;
        default: null;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedTopShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    options: {
        type: PropType<SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    root: import("vue").ShallowRef<HTMLElement | undefined>;
    virtualScrollerRef: import("vue").ShallowRef<import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        items: {
            type: ArrayConstructor;
            default: () => never[];
        };
        bench: {
            type: NumberConstructor;
            default: number;
            validator: (v: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        table: {
            type: BooleanConstructor;
            default: boolean;
        };
        horizontal: {
            type: BooleanConstructor;
            default: boolean;
        };
        itemSize: {
            type: PropType<string | number>;
            default: number;
            validator: (v: string | number) => boolean;
        };
        wrapperSize: {
            type: PropType<string | number>;
            default: number;
            validator: (v: string | number) => boolean;
        };
        trackBy: {
            type: PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
            default: string;
        };
    }>> & {
        "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
    }, {
        containerStyleComputed: import("vue").ComputedRef<{
            [x: string]: string | undefined;
        }>;
        wrapperStyleComputed: import("vue").ComputedRef<{
            [x: string]: string | undefined;
        }>;
        wrapperClassComputed: {
            "va-virtual-scroller--horizontal": boolean | undefined;
        } & {
            readonly asObject: import("vue").ComputedRef<{
                "va-virtual-scroller--horizontal": boolean | undefined;
            }>;
            readonly asArray: import("vue").ComputedRef<"va-virtual-scroller--horizontal"[]>;
            readonly asString: import("vue").ComputedRef<string>;
        };
        listStyleComputed: import("vue").ComputedRef<{
            transform: string;
        }>;
        currentListOffset: import("vue").ComputedRef<number>;
        renderStartIndex: import("vue").ComputedRef<number>;
        virtualScrollTo: (index: number) => void;
        renderBuffer: import("vue").ComputedRef<unknown[]>;
        uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
        wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
        list: import("vue").ShallowRef<HTMLElement | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "scroll:bottom"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        items: {
            type: ArrayConstructor;
            default: () => never[];
        };
        bench: {
            type: NumberConstructor;
            default: number;
            validator: (v: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        table: {
            type: BooleanConstructor;
            default: boolean;
        };
        horizontal: {
            type: BooleanConstructor;
            default: boolean;
        };
        itemSize: {
            type: PropType<string | number>;
            default: number;
            validator: (v: string | number) => boolean;
        };
        wrapperSize: {
            type: PropType<string | number>;
            default: number;
            validator: (v: string | number) => boolean;
        };
        trackBy: {
            type: PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
            default: string;
        };
    }>> & {
        "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
    }, {
        items: unknown[];
        horizontal: boolean;
        disabled: boolean;
        table: boolean;
        trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
        bench: number;
        itemSize: string | number;
        wrapperSize: string | number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        items: {
            type: ArrayConstructor;
            default: () => never[];
        };
        bench: {
            type: NumberConstructor;
            default: number;
            validator: (v: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        table: {
            type: BooleanConstructor;
            default: boolean;
        };
        horizontal: {
            type: BooleanConstructor;
            default: boolean;
        };
        itemSize: {
            type: PropType<string | number>;
            default: number;
            validator: (v: string | number) => boolean;
        };
        wrapperSize: {
            type: PropType<string | number>;
            default: number;
            validator: (v: string | number) => boolean;
        };
        trackBy: {
            type: PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
            default: string;
        };
    }>> & {
        "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
    }, {
        containerStyleComputed: import("vue").ComputedRef<{
            [x: string]: string | undefined;
        }>;
        wrapperStyleComputed: import("vue").ComputedRef<{
            [x: string]: string | undefined;
        }>;
        wrapperClassComputed: {
            "va-virtual-scroller--horizontal": boolean | undefined;
        } & {
            readonly asObject: import("vue").ComputedRef<{
                "va-virtual-scroller--horizontal": boolean | undefined;
            }>;
            readonly asArray: import("vue").ComputedRef<"va-virtual-scroller--horizontal"[]>;
            readonly asString: import("vue").ComputedRef<string>;
        };
        listStyleComputed: import("vue").ComputedRef<{
            transform: string;
        }>;
        currentListOffset: import("vue").ComputedRef<number>;
        renderStartIndex: import("vue").ComputedRef<number>;
        virtualScrollTo: (index: number) => void;
        renderBuffer: import("vue").ComputedRef<unknown[]>;
        uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
        wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
        list: import("vue").ShallowRef<HTMLElement | undefined>;
    }, {}, {}, {}, {
        items: unknown[];
        horizontal: boolean;
        disabled: boolean;
        table: boolean;
        trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
        bench: number;
        itemSize: string | number;
        wrapperSize: string | number;
    }>[] | undefined>;
    rootHeight: import("vue").ComputedRef<number>;
    optionGroups: import("vue").Ref<Record<string, SelectOption[]>>;
    filteredOptions: import("vue").ComputedRef<SelectOption[]>;
    selectOptionProps: import("vue").ComputedRef<{
        getText: (option: SelectOption) => string;
        getTrackBy: (option: SelectOption) => string | number;
        color: string;
        search: string;
        getSelectedState: (option: SelectOption) => boolean;
        highlightMatchedText: boolean;
        minSearchChars: number;
    }>;
    currentOptionComputed: import("vue").ComputedRef<SelectOption | null>;
    onScroll: (event: UIEvent) => void;
    getTrackBy: (option: SelectOption) => string | number;
    setItemRef: (key: string | number) => (el: any) => string | undefined;
    getDisabled: (option: SelectOption) => boolean;
    selectHoveredOption: () => void;
    handleMouseMove: (option: SelectOption) => void;
    handleMouseEnter: (option: SelectOption) => void;
    updateHoveredOption: (option?: SelectOption) => void;
    handleScrollToBottom: () => void;
    selectOption: (option: SelectOption) => void;
    focusPreviousOption: () => void;
    focusNextOption: () => void;
    focusFirstOption: () => void;
    scrollToOption: (option: SelectOption) => void;
    focus: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom")[], "select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    getSelectedState: {
        type: PropType<(option: SelectOption) => boolean>;
        required: true;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    hoveredOption: {
        type: PropType<SelectOption | null>;
        default: null;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedTopShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    options: {
        type: PropType<SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onSelect-option"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredOption"?: ((...args: any[]) => any) | undefined;
    "onNo-previous-option-to-hover"?: ((...args: any[]) => any) | undefined;
    "onScroll-bottom"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    multiple: boolean;
    color: string;
    tabindex: string | number;
    search: string;
    options: SelectOption[];
    textBy: import("../../../../composables").StringOrFunction;
    valueBy: import("../../../../composables").StringOrFunction;
    trackBy: import("../../../../composables").StringOrFunction;
    disabledBy: import("../../../../composables").StringOrFunction;
    groupBy: import("../../../../composables").StringOrFunction;
    virtualScroller: boolean;
    delay: number;
    highlightMatchedText: boolean;
    minSearchChars: number;
    noOptionsText: string;
    hoveredOption: SelectOption | null;
    autoSelectFirstOption: boolean;
    selectedTopShown: boolean;
}, {}>;
export default _default;
