export { VaSelectOptionList } from './components/VaSelectOptionList';
export { VaSelectOption } from './components/VaSelectOption';
export declare const VaSelect: import("vue").DefineComponent<{
    modelValue: {
        type: import("vue").PropType<import("./types").SelectOption | import("./types").SelectOption[]>;
        default: string;
    };
    placement: {
        default: string;
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    allowCreate: {
        type: import("vue").PropType<boolean | "unique">;
        default: boolean;
        validator: (mode: string | boolean) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    hideSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedTopShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    searchPlaceholderText: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSearchLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaClearLabel: {
        type: StringConstructor;
        default: string;
    };
    search: {
        type: StringConstructor;
        default: undefined;
    };
    closeOnChange: {
        type: BooleanConstructor;
        default: null;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
        default: string;
    };
    anchor: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
    };
    offset: {
        type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
        default: number;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    readonly: {
        type: BooleanConstructor;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnFocusOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    verticalScrollOnOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean | import("../va-dropdown/types").CursorAnchor>;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    autocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    dropdownIcon: {
        type: import("vue").PropType<string | import("./types").SelectDropdownIcon>;
        default: () => import("./types").SelectDropdownIcon;
        validator: (value: string | import("./types").SelectDropdownIcon) => boolean;
    };
    maxVisibleOptions: {
        type: NumberConstructor;
        default: number;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    maxSelections: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: import("vue").PropType<import("../../composables").ValidationRule<import("./types").SelectOption>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: import("vue").PropType<import("./types").SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    background: {
        type: StringConstructor;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    counter: {
        type: BooleanConstructor;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
}, {
    popupId: string;
    input: import("vue").ShallowRef<import("vue").DefineComponent<{
        modelValue: {
            type: null;
            default: string;
        };
        counter: {
            type: BooleanConstructor;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        innerLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputAriaLabel: {
            type: StringConstructor;
            default: string;
        };
        inputAriaLabelledby: {
            type: StringConstructor;
        };
        inputAriaDescribedby: {
            type: StringConstructor;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }, {
        focus: () => void;
        blur: () => void;
        labelId: string;
        characterCountId: string;
        ariaAttributes: import("vue").ComputedRef<{
            'aria-label': string;
            'aria-labelledby': string;
            'aria-describedby': string;
        }>;
        vModel: import("vue").WritableComputedRef<string>;
        counterValue: import("vue").ComputedRef<number | undefined>;
        vaInputLabelProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
            label: {
                type: StringConstructor;
                default: string;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }, "">>>;
        wrapperClass: {
            "va-input-wrapper--success": boolean | undefined;
            "va-input-wrapper--error": boolean | undefined;
            "va-input-wrapper--disabled": boolean | undefined;
            "va-input-wrapper--readonly": boolean | undefined;
            "va-input-wrapper--focused": boolean | undefined;
            "va-input-wrapper--labeled": boolean | undefined;
            "va-input-wrapper--labeledInner": boolean | undefined;
        } & {
            readonly asObject: import("vue").ComputedRef<{
                "va-input-wrapper--success": boolean | undefined;
                "va-input-wrapper--error": boolean | undefined;
                "va-input-wrapper--disabled": boolean | undefined;
                "va-input-wrapper--readonly": boolean | undefined;
                "va-input-wrapper--focused": boolean | undefined;
                "va-input-wrapper--labeled": boolean | undefined;
                "va-input-wrapper--labeledInner": boolean | undefined;
            }>;
            readonly asArray: import("vue").ComputedRef<("va-input-wrapper--success" | "va-input-wrapper--error" | "va-input-wrapper--disabled" | "va-input-wrapper--readonly" | "va-input-wrapper--focused" | "va-input-wrapper--labeled" | "va-input-wrapper--labeledInner")[]>;
            readonly asString: import("vue").ComputedRef<string>;
        };
        textColorComputed: import("vue").ComputedRef<string>;
        isCounterVisible: import("vue").ComputedRef<boolean>;
        counterComputed: import("vue").ComputedRef<string | number | undefined>;
        colorComputed: import("vue").ComputedRef<string>;
        backgroundComputed: import("vue").ComputedRef<string>;
        messagesColor: import("vue").ComputedRef<"" | "danger" | "success">;
        messagesComputed: import("vue").ComputedRef<string | string[] | undefined>;
        errorLimit: import("vue").ComputedRef<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner" | "click-field")[], "update:modelValue" | "click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner" | "click-field", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: null;
            default: string;
        };
        counter: {
            type: BooleanConstructor;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        innerLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputAriaLabel: {
            type: StringConstructor;
            default: string;
        };
        inputAriaLabelledby: {
            type: StringConstructor;
        };
        inputAriaDescribedby: {
            type: StringConstructor;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        "onClick-prepend"?: ((...args: any[]) => any) | undefined;
        "onClick-append"?: ((...args: any[]) => any) | undefined;
        "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
        "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
        "onClick-field"?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        name: string;
        modelValue: any;
        color: string;
        success: boolean;
        error: boolean;
        loading: boolean;
        disabled: boolean;
        label: string;
        readonly: boolean;
        placeholder: string;
        messages: string | string[];
        dirty: boolean;
        errorMessages: string | string[];
        errorCount: string | number;
        rules: import("../../composables").ValidationRule<any>[];
        immediateValidation: boolean;
        requiredMark: boolean;
        counter: boolean;
        maxLength: number;
        innerLabel: boolean;
        inputAriaLabel: string;
    }, {}> | undefined>;
    optionList: import("vue").ShallowRef<import("vue").DefineComponent<{
        noOptionsText: {
            type: StringConstructor;
            default: string;
        };
        getSelectedState: {
            type: import("vue").PropType<(option: import("./types").SelectOption) => boolean>;
            required: true;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        search: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoveredOption: {
            type: import("vue").PropType<import("./types").SelectOption | null>;
            default: null;
        };
        virtualScroller: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightMatchedText: {
            type: BooleanConstructor;
            default: boolean;
        };
        minSearchChars: {
            type: NumberConstructor;
            default: number;
        };
        autoSelectFirstOption: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectedTopShown: {
            type: BooleanConstructor;
            default: boolean;
        };
        delay: {
            type: NumberConstructor;
            default: number;
            validator: (value: number) => boolean;
        };
        options: {
            type: import("vue").PropType<import("./types").SelectOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }, {
        root: import("vue").ShallowRef<HTMLElement | undefined>;
        virtualScrollerRef: import("vue").ShallowRef<import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
            items: {
                type: ArrayConstructor;
                default: () => never[];
            };
            bench: {
                type: NumberConstructor;
                default: number;
                validator: (v: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            table: {
                type: BooleanConstructor;
                default: boolean;
            };
            horizontal: {
                type: BooleanConstructor;
                default: boolean;
            };
            itemSize: {
                type: import("vue").PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            wrapperSize: {
                type: import("vue").PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            trackBy: {
                type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                default: string;
            };
        }>> & {
            "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
        }, {
            containerStyleComputed: import("vue").ComputedRef<{
                [x: string]: string | undefined;
            }>;
            wrapperStyleComputed: import("vue").ComputedRef<{
                [x: string]: string | undefined;
            }>;
            wrapperClassComputed: {
                "va-virtual-scroller--horizontal": boolean | undefined;
            } & {
                readonly asObject: import("vue").ComputedRef<{
                    "va-virtual-scroller--horizontal": boolean | undefined;
                }>;
                readonly asArray: import("vue").ComputedRef<"va-virtual-scroller--horizontal"[]>;
                readonly asString: import("vue").ComputedRef<string>;
            };
            listStyleComputed: import("vue").ComputedRef<{
                transform: string;
            }>;
            currentListOffset: import("vue").ComputedRef<number>;
            renderStartIndex: import("vue").ComputedRef<number>;
            virtualScrollTo: (index: number) => void;
            renderBuffer: import("vue").ComputedRef<unknown[]>;
            uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
            wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
            list: import("vue").ShallowRef<HTMLElement | undefined>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "scroll:bottom"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            items: {
                type: ArrayConstructor;
                default: () => never[];
            };
            bench: {
                type: NumberConstructor;
                default: number;
                validator: (v: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            table: {
                type: BooleanConstructor;
                default: boolean;
            };
            horizontal: {
                type: BooleanConstructor;
                default: boolean;
            };
            itemSize: {
                type: import("vue").PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            wrapperSize: {
                type: import("vue").PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            trackBy: {
                type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                default: string;
            };
        }>> & {
            "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
        }, {
            items: unknown[];
            horizontal: boolean;
            disabled: boolean;
            table: boolean;
            trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
            bench: number;
            itemSize: string | number;
            wrapperSize: string | number;
        }, true, {}, {}, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("vue").ExtractPropTypes<{
            items: {
                type: ArrayConstructor;
                default: () => never[];
            };
            bench: {
                type: NumberConstructor;
                default: number;
                validator: (v: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            table: {
                type: BooleanConstructor;
                default: boolean;
            };
            horizontal: {
                type: BooleanConstructor;
                default: boolean;
            };
            itemSize: {
                type: import("vue").PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            wrapperSize: {
                type: import("vue").PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            trackBy: {
                type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                default: string;
            };
        }>> & {
            "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
        }, {
            containerStyleComputed: import("vue").ComputedRef<{
                [x: string]: string | undefined;
            }>;
            wrapperStyleComputed: import("vue").ComputedRef<{
                [x: string]: string | undefined;
            }>;
            wrapperClassComputed: {
                "va-virtual-scroller--horizontal": boolean | undefined;
            } & {
                readonly asObject: import("vue").ComputedRef<{
                    "va-virtual-scroller--horizontal": boolean | undefined;
                }>;
                readonly asArray: import("vue").ComputedRef<"va-virtual-scroller--horizontal"[]>;
                readonly asString: import("vue").ComputedRef<string>;
            };
            listStyleComputed: import("vue").ComputedRef<{
                transform: string;
            }>;
            currentListOffset: import("vue").ComputedRef<number>;
            renderStartIndex: import("vue").ComputedRef<number>;
            virtualScrollTo: (index: number) => void;
            renderBuffer: import("vue").ComputedRef<unknown[]>;
            uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
            wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
            list: import("vue").ShallowRef<HTMLElement | undefined>;
        }, {}, {}, {}, {
            items: unknown[];
            horizontal: boolean;
            disabled: boolean;
            table: boolean;
            trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
            bench: number;
            itemSize: string | number;
            wrapperSize: string | number;
        }>[] | undefined>;
        rootHeight: import("vue").ComputedRef<number>;
        optionGroups: import("vue").Ref<Record<string, import("./types").SelectOption[]>>;
        filteredOptions: import("vue").ComputedRef<import("./types").SelectOption[]>;
        selectOptionProps: import("vue").ComputedRef<{
            getText: (option: import("./types").SelectOption) => string;
            getTrackBy: (option: import("./types").SelectOption) => string | number;
            color: string;
            search: string;
            getSelectedState: (option: import("./types").SelectOption) => boolean;
            highlightMatchedText: boolean;
            minSearchChars: number;
        }>;
        currentOptionComputed: import("vue").ComputedRef<import("./types").SelectOption | null>;
        onScroll: (event: UIEvent) => void;
        getTrackBy: (option: import("./types").SelectOption) => string | number;
        setItemRef: (key: string | number) => (el: any) => string | undefined;
        getDisabled: (option: import("./types").SelectOption) => boolean;
        selectHoveredOption: () => void;
        handleMouseMove: (option: import("./types").SelectOption) => void;
        handleMouseEnter: (option: import("./types").SelectOption) => void;
        updateHoveredOption: (option?: import("./types").SelectOption | undefined) => void;
        handleScrollToBottom: () => void;
        selectOption: (option: import("./types").SelectOption) => void;
        focusPreviousOption: () => void;
        focusNextOption: () => void;
        focusFirstOption: () => void;
        scrollToOption: (option: import("./types").SelectOption) => void;
        focus: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom")[], "select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        noOptionsText: {
            type: StringConstructor;
            default: string;
        };
        getSelectedState: {
            type: import("vue").PropType<(option: import("./types").SelectOption) => boolean>;
            required: true;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        search: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoveredOption: {
            type: import("vue").PropType<import("./types").SelectOption | null>;
            default: null;
        };
        virtualScroller: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightMatchedText: {
            type: BooleanConstructor;
            default: boolean;
        };
        minSearchChars: {
            type: NumberConstructor;
            default: number;
        };
        autoSelectFirstOption: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectedTopShown: {
            type: BooleanConstructor;
            default: boolean;
        };
        delay: {
            type: NumberConstructor;
            default: number;
            validator: (value: number) => boolean;
        };
        options: {
            type: import("vue").PropType<import("./types").SelectOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onSelect-option"?: ((...args: any[]) => any) | undefined;
        "onUpdate:hoveredOption"?: ((...args: any[]) => any) | undefined;
        "onNo-previous-option-to-hover"?: ((...args: any[]) => any) | undefined;
        "onScroll-bottom"?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        multiple: boolean;
        color: string;
        tabindex: string | number;
        search: string;
        options: import("./types").SelectOption[];
        textBy: import("../../composables").StringOrFunction;
        valueBy: import("../../composables").StringOrFunction;
        trackBy: import("../../composables").StringOrFunction;
        disabledBy: import("../../composables").StringOrFunction;
        groupBy: import("../../composables").StringOrFunction;
        virtualScroller: boolean;
        delay: number;
        highlightMatchedText: boolean;
        minSearchChars: number;
        noOptionsText: string;
        hoveredOption: import("./types").SelectOption | null;
        autoSelectFirstOption: boolean;
        selectedTopShown: boolean;
    }, {}> | undefined>;
    searchBar: import("vue").ShallowRef<import("vue").DefineComponent<{
        modelValue: {
            type: null;
            default: string;
        };
        counter: {
            type: BooleanConstructor;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        innerLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputAriaLabel: {
            type: StringConstructor;
            default: string;
        };
        inputAriaLabelledby: {
            type: StringConstructor;
        };
        inputAriaDescribedby: {
            type: StringConstructor;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }, {
        focus: () => void;
        blur: () => void;
        labelId: string;
        characterCountId: string;
        ariaAttributes: import("vue").ComputedRef<{
            'aria-label': string;
            'aria-labelledby': string;
            'aria-describedby': string;
        }>;
        vModel: import("vue").WritableComputedRef<string>;
        counterValue: import("vue").ComputedRef<number | undefined>;
        vaInputLabelProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
            label: {
                type: StringConstructor;
                default: string;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }, "">>>;
        wrapperClass: {
            "va-input-wrapper--success": boolean | undefined;
            "va-input-wrapper--error": boolean | undefined;
            "va-input-wrapper--disabled": boolean | undefined;
            "va-input-wrapper--readonly": boolean | undefined;
            "va-input-wrapper--focused": boolean | undefined;
            "va-input-wrapper--labeled": boolean | undefined;
            "va-input-wrapper--labeledInner": boolean | undefined;
        } & {
            readonly asObject: import("vue").ComputedRef<{
                "va-input-wrapper--success": boolean | undefined;
                "va-input-wrapper--error": boolean | undefined;
                "va-input-wrapper--disabled": boolean | undefined;
                "va-input-wrapper--readonly": boolean | undefined;
                "va-input-wrapper--focused": boolean | undefined;
                "va-input-wrapper--labeled": boolean | undefined;
                "va-input-wrapper--labeledInner": boolean | undefined;
            }>;
            readonly asArray: import("vue").ComputedRef<("va-input-wrapper--success" | "va-input-wrapper--error" | "va-input-wrapper--disabled" | "va-input-wrapper--readonly" | "va-input-wrapper--focused" | "va-input-wrapper--labeled" | "va-input-wrapper--labeledInner")[]>;
            readonly asString: import("vue").ComputedRef<string>;
        };
        textColorComputed: import("vue").ComputedRef<string>;
        isCounterVisible: import("vue").ComputedRef<boolean>;
        counterComputed: import("vue").ComputedRef<string | number | undefined>;
        colorComputed: import("vue").ComputedRef<string>;
        backgroundComputed: import("vue").ComputedRef<string>;
        messagesColor: import("vue").ComputedRef<"" | "danger" | "success">;
        messagesComputed: import("vue").ComputedRef<string | string[] | undefined>;
        errorLimit: import("vue").ComputedRef<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner" | "click-field")[], "update:modelValue" | "click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner" | "click-field", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: null;
            default: string;
        };
        counter: {
            type: BooleanConstructor;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        innerLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputAriaLabel: {
            type: StringConstructor;
            default: string;
        };
        inputAriaLabelledby: {
            type: StringConstructor;
        };
        inputAriaDescribedby: {
            type: StringConstructor;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        "onClick-prepend"?: ((...args: any[]) => any) | undefined;
        "onClick-append"?: ((...args: any[]) => any) | undefined;
        "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
        "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
        "onClick-field"?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        name: string;
        modelValue: any;
        color: string;
        success: boolean;
        error: boolean;
        loading: boolean;
        disabled: boolean;
        label: string;
        readonly: boolean;
        placeholder: string;
        messages: string | string[];
        dirty: boolean;
        errorMessages: string | string[];
        errorCount: string | number;
        rules: import("../../composables").ValidationRule<any>[];
        immediateValidation: boolean;
        requiredMark: boolean;
        counter: boolean;
        maxLength: number;
        innerLabel: boolean;
        inputAriaLabel: string;
    }, {}> | undefined>;
    reset: () => void;
    focus: () => void;
    blur: () => void;
    toggleDropdown: (e: KeyboardEvent) => void;
    deleteLastSelected: () => void;
    focusAutocompleteInput: (e?: Event | undefined) => void;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t: (key: string, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    onInputFocus: (e?: Event | undefined) => void;
    onInputBlur: () => void;
    focusOptionList: () => void;
    focusSearchBar: () => void;
    searchInput: import("vue").WritableComputedRef<string>;
    showSearchInput: import("vue").ComputedRef<boolean>;
    hoveredOption: import("vue").Ref<import("./types").SelectOption | null>;
    tabIndexComputed: import("vue").ComputedRef<string | number>;
    valueString: import("vue").ComputedRef<string>;
    showClearIcon: import("vue").ComputedRef<boolean>;
    toggleIcon: import("vue").ComputedRef<string>;
    selectOption: (option: import("./types").SelectOption) => void;
    selectOrAddOption: () => void;
    selectHoveredOption: () => void;
    focusPreviousOption: () => any;
    focusNextOption: () => any;
    showDropdownContentComputed: import("vue").WritableComputedRef<boolean>;
    handleDropdownOpen: () => void;
    handleDropdownClose: () => void;
    hideAndFocus: () => void;
    toggleIconColor: import("vue").ComputedRef<string>;
    onHintedSearch: (event: KeyboardEvent) => void;
    onScrollBottom: () => void;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
        tabindex: number;
    }>;
    dropdownPropsComputed: import("vue").ComputedRef<{
        closeOnContentClick: boolean;
        stateful: boolean;
        offset: import("../va-dropdown/types").DropdownOffsetProp;
        keepAnchorWidth: boolean;
        keyboardNavigation: boolean;
        innerAnchorSelector: string;
        role: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">;
        ariaLabel: string;
        disabled: boolean;
        placement: import("../../composables").PlacementWithAlias;
        anchorSelector: string;
        trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
        readonly: boolean;
        closeOnClickOutside: boolean;
        closeOnFocusOutside: boolean;
        closeOnAnchorClick: boolean;
        hoverOverTimeout: number;
        hoverOutTimeout: number;
        isContentHoverable: boolean;
        verticalScrollOnOverflow: boolean;
        cursor: boolean | import("../va-dropdown/types").CursorAnchor;
        autoPlacement: boolean;
        stickToEdges: boolean;
        target?: import("../../composables").MaybeHTMLElementOrSelector;
        anchor?: import("../../composables").MaybeHTMLElementOrSelector;
        teleport?: import("../../composables").MaybeHTMLElementOrSelector;
    }>;
    visibleSelectedOptions: import("vue").ComputedRef<import("./types").SelectOption[]>;
    optionsListPropsComputed: import("vue").ComputedRef<{
        autoSelectFirstOption: boolean;
        search: string;
        tabindex: string | number;
        selectedValue: import("./types").SelectOption | import("./types").SelectOption[];
        options: import("./types").SelectOption[];
        getSelectedState: (option: import("./types").SelectOption) => boolean;
        noOptionsText: string;
        color: string;
        textBy: import("../../composables").StringOrFunction;
        valueBy: import("../../composables").StringOrFunction;
        trackBy: import("../../composables").StringOrFunction;
        disabledBy: import("../../composables").StringOrFunction;
        groupBy: import("../../composables").StringOrFunction;
        virtualScroller: boolean;
        delay: number;
        highlightMatchedText: boolean;
        minSearchChars: number;
        selectedTopShown: boolean;
    }>;
    toggleHiddenOptionsState: () => boolean;
    setAutocompleteValue: (v: string) => string;
    inputWrapperPropsComputed: import("vue").ComputedRef<{
        error: boolean;
        errorMessages: string[];
        focused: boolean;
        'aria-label': string;
        modelValue: any;
        color: string;
        success: boolean;
        loading: boolean;
        disabled: boolean;
        label: string;
        readonly: boolean;
        placeholder: string;
        messages: string | string[];
        dirty: boolean;
        errorCount: string | number;
        immediateValidation: boolean;
        requiredMark: boolean;
        counter: boolean;
        innerLabel: boolean;
        inputAriaLabel: string;
        preset?: string | undefined;
        name?: string | undefined;
        background?: string | undefined;
        rules?: import("../../composables").ValidationRule<any>[] | undefined;
        maxLength?: number | undefined;
        inputAriaLabelledby?: string | undefined;
        inputAriaDescribedby?: string | undefined;
    }>;
    inputWrapperClassComputed: {
        "va-select-anchor--nowrap": boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-select-anchor--nowrap": boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<"va-select-anchor--nowrap"[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    selectContentPropsComputed: import("vue").ComputedRef<{
        tabindex: string | number;
        value: import("./types").SelectOption[];
        valueString: string;
        hiddenSelectedOptionsAmount: number;
        isAllOptionsShown: boolean;
        focused: boolean | undefined;
        autocompleteInputValue: string;
        getText: (option: import("./types").SelectOption) => string;
        multiple: boolean;
        disabled: boolean;
        readonly: boolean;
        placeholder: string;
        autocomplete: boolean;
    }>;
    openSelectButtonTabIndexComputed: import("vue").ComputedRef<0 | -1>;
    getOptionByValue: (value: import("./types").SelectOption) => import("./types").SelectOption;
    compareOptions: (option1: import("./types").SelectOption, option2: import("./types").SelectOption) => boolean;
    getText: (option: import("./types").SelectOption) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<import("./types").SelectOption | import("./types").SelectOption[]>;
        default: string;
    };
    placement: {
        default: string;
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    allowCreate: {
        type: import("vue").PropType<boolean | "unique">;
        default: boolean;
        validator: (mode: string | boolean) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    hideSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedTopShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    searchPlaceholderText: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSearchLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaClearLabel: {
        type: StringConstructor;
        default: string;
    };
    search: {
        type: StringConstructor;
        default: undefined;
    };
    closeOnChange: {
        type: BooleanConstructor;
        default: null;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
        default: string;
    };
    anchor: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
    };
    offset: {
        type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
        default: number;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    readonly: {
        type: BooleanConstructor;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnFocusOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    verticalScrollOnOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: import("vue").PropType<boolean | import("../va-dropdown/types").CursorAnchor>;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    autocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    dropdownIcon: {
        type: import("vue").PropType<string | import("./types").SelectDropdownIcon>;
        default: () => import("./types").SelectDropdownIcon;
        validator: (value: string | import("./types").SelectDropdownIcon) => boolean;
    };
    maxVisibleOptions: {
        type: NumberConstructor;
        default: number;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    maxSelections: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: import("vue").PropType<import("../../composables").ValidationRule<import("./types").SelectOption>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: import("vue").PropType<import("./types").SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    background: {
        type: StringConstructor;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    counter: {
        type: BooleanConstructor;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    modelValue: import("./types").SelectOption | import("./types").SelectOption[];
    multiple: boolean;
    target: import("../../composables").MaybeHTMLElementOrSelector;
    width: string;
    color: string;
    success: boolean;
    role: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">;
    tabindex: string | number;
    ariaLabel: string;
    search: string;
    anchor: import("../../composables").MaybeHTMLElementOrSelector;
    error: boolean;
    loading: boolean;
    options: import("./types").SelectOption[];
    disabled: boolean;
    placement: import("../../composables").PlacementWithAlias;
    offset: import("../va-dropdown/types").DropdownOffsetProp;
    separator: string;
    label: string;
    anchorSelector: string;
    trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
    readonly: boolean;
    closeOnClickOutside: boolean;
    closeOnFocusOutside: boolean;
    closeOnAnchorClick: boolean;
    closeOnContentClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    isContentHoverable: boolean;
    keepAnchorWidth: boolean;
    verticalScrollOnOverflow: boolean;
    cursor: boolean | import("../va-dropdown/types").CursorAnchor;
    autoPlacement: boolean;
    stickToEdges: boolean;
    teleport: import("../../composables").MaybeHTMLElementOrSelector;
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
    placeholder: string;
    messages: string | string[];
    dirty: boolean;
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<import("./types").SelectOption>[];
    immediateValidation: boolean;
    requiredMark: boolean;
    counter: boolean;
    maxLength: number;
    innerLabel: boolean;
    inputAriaLabel: string;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
    autocomplete: boolean;
    virtualScroller: boolean;
    delay: number;
    closeOnChange: boolean;
    isOpen: boolean;
    maxHeight: string;
    highlightMatchedText: boolean;
    minSearchChars: number;
    noOptionsText: string;
    autoSelectFirstOption: boolean;
    selectedTopShown: boolean;
    allowCreate: boolean | "unique";
    searchable: boolean;
    hideSelected: boolean;
    searchPlaceholderText: string;
    ariaSearchLabel: string;
    ariaClearLabel: string;
    dropdownIcon: string | import("./types").SelectDropdownIcon;
    maxVisibleOptions: number;
    maxSelections: string | number;
}, {}>;
export * from './types';
