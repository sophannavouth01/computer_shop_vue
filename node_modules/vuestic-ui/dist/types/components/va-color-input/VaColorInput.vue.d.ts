import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: StringConstructor;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicator: {
        type: PropType<"square" | "dot">;
        default: string;
        validator: (value: string) => boolean;
    };
    ariaOpenColorPickerLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    type: {
        type: import("../../utils/types/prop-type").AnyStringPropType<"text" | "password">;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    mask: {
        type: PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    pattern: {
        type: StringConstructor;
    };
    background: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: PropType<import("../../composables").ValidationRule<string>[]>;
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
    inputClass: {
        type: StringConstructor;
        default: string;
    };
    inputmode: {
        type: StringConstructor;
        default: string;
    };
    ariaResetLabel: {
        type: StringConstructor;
        default: string;
    };
    strictBindInputValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    returnRaw: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    valueComputed: import("vue").WritableComputedRef<string>;
    inputValue: import("vue").WritableComputedRef<string>;
    callPickerDialog: () => false | void | undefined;
    colorPicker: import("vue").ShallowRef<HTMLInputElement | undefined>;
    tabIndexComputed: import("vue").ComputedRef<0 | -1>;
    vaInputProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        type: {
            type: import("../../utils/types/prop-type").AnyStringPropType<"text" | "password">;
            default: string;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        ariaResetLabel: {
            type: StringConstructor;
            default: string;
        };
        strictBindInputValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        mask: {
            type: PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        } & {
            type: PropType<import("../../composables").ValidationRule<string>[]>;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        innerLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputAriaLabel: {
            type: StringConstructor;
            default: string;
        };
        inputAriaLabelledby: {
            type: StringConstructor;
        };
        inputAriaDescribedby: {
            type: StringConstructor;
        };
    }, "">>>;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicator: {
        type: PropType<"square" | "dot">;
        default: string;
        validator: (value: string) => boolean;
    };
    ariaOpenColorPickerLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    type: {
        type: import("../../utils/types/prop-type").AnyStringPropType<"text" | "password">;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    mask: {
        type: PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    pattern: {
        type: StringConstructor;
    };
    background: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: PropType<import("../../composables").ValidationRule<string>[]>;
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
    inputClass: {
        type: StringConstructor;
        default: string;
    };
    inputmode: {
        type: StringConstructor;
        default: string;
    };
    ariaResetLabel: {
        type: StringConstructor;
        default: string;
    };
    strictBindInputValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    returnRaw: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    modelValue: string;
    stateful: boolean;
    type: import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password">;
    color: string;
    success: boolean;
    tabindex: string | number;
    error: boolean;
    loading: boolean;
    mask: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions;
    disabled: boolean;
    label: string;
    readonly: boolean;
    placeholder: string;
    messages: string | string[];
    dirty: boolean;
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<string>[];
    immediateValidation: boolean;
    requiredMark: boolean;
    counter: boolean;
    maxLength: number;
    innerLabel: boolean;
    inputAriaLabel: string;
    inputClass: string;
    inputmode: string;
    ariaResetLabel: string;
    strictBindInputValue: boolean;
    returnRaw: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
    autofocus: boolean;
    indicator: "square" | "dot";
    ariaOpenColorPickerLabel: string;
}, {}>;
export default _default;
