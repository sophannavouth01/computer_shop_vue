declare const _default: import("vue").DefineComponent<{
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    hoverColor: {
        type: StringConstructor;
        default: undefined;
    };
    hoverOpacity: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    minimized: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    minimizedWidth: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    animated: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    menu: import("vue").Ref<HTMLElement | undefined>;
    menuWidth: import("vue").ComputedRef<string>;
    doShowMenu: import("vue").ComputedRef<boolean>;
    computedClass: {
        "va-sidebar--animated": boolean | undefined;
        "va-sidebar--minimized": boolean | undefined;
        "va-sidebar--animated-right": boolean | undefined;
        "va-sidebar--animated-left": boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-sidebar--animated": boolean | undefined;
            "va-sidebar--minimized": boolean | undefined;
            "va-sidebar--animated-right": boolean | undefined;
            "va-sidebar--animated-left": boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<("va-sidebar--animated" | "va-sidebar--minimized" | "va-sidebar--animated-right" | "va-sidebar--animated-left")[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    computedStyle: import("vue").ComputedRef<{
        color: string;
        backgroundColor: string;
        backgroundImage: string | undefined;
        overflowX: "hidden" | undefined;
        width: any;
        minWidth: any;
    }>;
    updateHoverState: (newHoverState: boolean) => void;
    rootElement: import("vue").ShallowRef<HTMLElement | undefined>;
    vaSidebarItemProps: import("vue").ComputedRef<{
        textColor: string | undefined;
        activeColor: string;
        hoverColor: string | undefined;
        borderColor: string | undefined;
        hoverOpacity: number;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    hoverColor: {
        type: StringConstructor;
        default: undefined;
    };
    hoverOpacity: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    minimized: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    minimizedWidth: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    animated: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    modelValue: boolean;
    width: string;
    color: string;
    borderColor: string;
    gradient: boolean;
    hoverOpacity: number;
    activeColor: string;
    closeOnClickOutside: boolean;
    hoverable: boolean;
    animated: string | boolean;
    hoverColor: string;
    minimized: boolean;
    minimizedWidth: string;
}, {}>;
export default _default;
