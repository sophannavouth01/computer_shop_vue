import { PropType, Ref } from 'vue';
import type { DateInputModelValue, DateInputValue } from './types';
declare const _default: import("vue").DefineComponent<{
    clearValue: {
        type: PropType<DateInputModelValue>;
        default: undefined;
    };
    modelValue: {
        type: PropType<DateInputModelValue>;
    };
    resetOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        default: () => number[];
        type: PropType<import("../va-dropdown/types").DropdownOffsetProp>;
    };
    format: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    formatDate: {
        type: PropType<(date: Date) => string>;
        default: (d: Date) => string;
    };
    parse: {
        type: PropType<(input: string) => DateInputValue>;
    };
    parseDate: {
        type: PropType<(input: string) => Date>;
    };
    parseValue: {
        type: PropType<(date: DateInputModelValue) => import("../va-date-picker/types").DatePickerModelValue>;
    };
    delimiter: {
        type: StringConstructor;
        default: string;
    };
    rangeDelimiter: {
        type: StringConstructor;
        default: string;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    ariaToggleDropdownLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaResetLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSelectedDateLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: PropType<import("../../composables").ValidationRule<DateInputModelValue>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    type: {
        type: PropType<import("../va-date-picker/types").DatePickerType>;
        default: string;
    };
    mode: {
        type: PropType<import("../va-date-picker/types").DatePickerMode>;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: PropType<import("../va-date-picker/types").DatePickerView>;
    };
    highlightWeekend: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    monthNames: {
        type: PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        default: string[];
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        default: string;
    };
    hideWeekDays: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOtherMonths: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
    };
    ariaNextPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaPreviousPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSwitchViewLabel: {
        type: StringConstructor;
        default: string;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    startYear: {
        type: NumberConstructor;
        default: number;
    };
    endYear: {
        type: NumberConstructor;
        default: () => number;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    background: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    counter: {
        type: BooleanConstructor;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    closeOnChange: {
        type: BooleanConstructor;
        default: null;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    target: {
        type: PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    role: {
        type: PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    anchor: {
        type: PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    placement: {
        type: PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnFocusOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    verticalScrollOnOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: PropType<boolean | import("../va-dropdown/types").CursorAnchor>;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
}, {
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    datePicker: Ref<import("vue").DefineComponent<{
        modelValue: {
            type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: PropType<string[]>;
            default: string[];
        };
        view: {
            type: PropType<import("../va-date-picker/types").DatePickerView>;
        };
        type: {
            type: PropType<import("../va-date-picker/types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        mode: {
            type: PropType<import("../va-date-picker/types").DatePickerMode>;
            default: string;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedYears: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        startYear: {
            type: NumberConstructor;
            default: number;
        };
        endYear: {
            type: NumberConstructor;
            default: () => number;
        };
        allowedMonths: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightWeekend: {
            type: BooleanConstructor;
            default: boolean;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            default: string;
        };
        hideWeekDays: {
            type: BooleanConstructor;
            default: boolean;
        };
        showOtherMonths: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedDays: {
            type: PropType<(date: Date) => boolean>;
        };
        weekends: {
            type: PropType<(date: Date) => boolean>;
        };
        ariaNextPeriodLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaPreviousPeriodLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaSwitchViewLabel: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
    }, {
        dayPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            weekdayNames: {
                type: PropType<string[]>;
                required: true;
            };
            firstWeekday: {
                type: PropType<"Monday" | "Sunday">;
                default: string;
            };
            hideWeekDays: {
                type: BooleanConstructor;
                default: boolean;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            showOtherMonths: {
                type: BooleanConstructor;
                default: boolean;
            };
            allowedDays: {
                type: PropType<(date: Date) => boolean>;
            };
            weekends: {
                type: PropType<(date: Date) => boolean>;
            };
            highlightWeekend: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }, "">>>;
        headerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
            monthNames: {
                type: ArrayConstructor;
                required: true;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
            };
            color: {
                type: StringConstructor;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            ariaNextPeriodLabel: {
                type: StringConstructor;
                default: string;
            };
            ariaPreviousPeriodLabel: {
                type: StringConstructor;
                default: string;
            };
            ariaSwitchViewLabel: {
                type: StringConstructor;
                default: string;
            };
        }, "">>>;
        monthPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            allowedMonths: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }, "">>>;
        yearPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            allowedYears: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            startYear: {
                type: NumberConstructor;
                default: number;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            endYear: {
                type: NumberConstructor;
                default: () => number;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }, "">>>;
        syncView: import("vue").WritableComputedRef<import("../va-date-picker/types").DatePickerView>;
        classComputed: import("vue").ComputedRef<{
            'va-date-picker_without-week-days': boolean;
            'va-date-picker_disabled': boolean;
        }>;
        valueComputed: import("vue").WritableComputedRef<import("../va-date-picker/types").DatePickerModelValue>;
        onDayModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
        onMonthClick: (date: Date) => void;
        onMonthModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
        onYearClick: (date: Date) => void;
        onYearModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
        styleComputed: import("vue").ComputedRef<{
            [x: string]: any;
        }>;
        currentPicker: Ref<import("vue").DefineComponent<{
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            weekdayNames: {
                type: PropType<string[]>;
                required: true;
            };
            firstWeekday: {
                type: PropType<"Monday" | "Sunday">;
                default: string;
            };
            hideWeekDays: {
                type: BooleanConstructor;
                default: boolean;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            showOtherMonths: {
                type: BooleanConstructor;
                default: boolean;
            };
            allowedDays: {
                type: PropType<(date: Date) => boolean>;
            };
            weekends: {
                type: PropType<(date: Date) => boolean>;
            };
            highlightWeekend: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }, {
            hoveredIndex: Ref<number>;
            calendarDates: import("vue").ComputedRef<Date[]>;
            onClick: (date: Date) => void;
            isToday: (date: Date) => boolean;
            isSelected: (date: Date) => boolean;
            isInRange: (date: Date) => boolean;
            isOtherMonth: (date: Date) => boolean;
            isDateDisabled: (date: Date) => boolean;
            isDateWeekend: (date: Date) => boolean;
            containerAttributes: {
                onFocus: () => void;
                onKeydown: (e: KeyboardEvent) => void;
                onBlur: () => void;
                onMousedown: () => void;
                tabindex: number;
            };
            weekdayNamesComputed: import("vue").ComputedRef<string[]>;
            focusedCellIndex: Ref<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day")[], "update:modelValue" | "hover:day" | "click:day", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            weekdayNames: {
                type: PropType<string[]>;
                required: true;
            };
            firstWeekday: {
                type: PropType<"Monday" | "Sunday">;
                default: string;
            };
            hideWeekDays: {
                type: BooleanConstructor;
                default: boolean;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            showOtherMonths: {
                type: BooleanConstructor;
                default: boolean;
            };
            allowedDays: {
                type: PropType<(date: Date) => boolean>;
            };
            weekends: {
                type: PropType<(date: Date) => boolean>;
            };
            highlightWeekend: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onHover:day"?: ((...args: any[]) => any) | undefined;
            "onClick:day"?: ((...args: any[]) => any) | undefined;
        }, {
            color: string;
            mode: import("../va-date-picker/types").DatePickerMode;
            readonly: boolean;
            view: import("../va-date-picker/types").DatePickerView;
            highlightWeekend: boolean;
            highlightToday: boolean;
            firstWeekday: "Monday" | "Sunday";
            hideWeekDays: boolean;
            showOtherMonths: boolean;
        }, {}> | import("vue").DefineComponent<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            allowedMonths: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }, {
            months: import("vue").ComputedRef<Date[]>;
            hoveredIndex: Ref<number>;
            onClick: (date: Date) => void;
            isToday: (date: Date) => boolean;
            isSelected: (date: Date) => boolean;
            isInRange: (date: Date) => boolean;
            isDisabled: (date: Date) => boolean;
            containerAttributes: {
                onFocus: () => void;
                onKeydown: (e: KeyboardEvent) => void;
                onBlur: () => void;
                onMousedown: () => void;
                tabindex: number;
            };
            focusedCellIndex: Ref<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:month" | "click:month")[], "update:modelValue" | "hover:month" | "click:month", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            allowedMonths: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onHover:month"?: ((...args: any[]) => any) | undefined;
            "onClick:month"?: ((...args: any[]) => any) | undefined;
        }, {
            color: string;
            mode: import("../va-date-picker/types").DatePickerMode;
            readonly: boolean;
            view: import("../va-date-picker/types").DatePickerView;
            highlightToday: boolean;
            allowedMonths: (date: Date) => boolean;
        }, {}> | import("vue").DefineComponent<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            allowedYears: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            startYear: {
                type: NumberConstructor;
                default: number;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            endYear: {
                type: NumberConstructor;
                default: () => number;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }, {
            hoveredIndex: Ref<number>;
            years: import("vue").ComputedRef<Date[]>;
            rootNode: import("vue").ShallowRef<HTMLElement | undefined>;
            onClick: (date: Date) => void;
            isToday: (date: Date) => boolean;
            isSelected: (date: Date) => boolean;
            isInRange: (date: Date) => boolean;
            isYearDisabled: (year: Date) => boolean;
            focusedCellIndex: Ref<number>;
            containerAttributes: {
                onFocus: () => void;
                onKeydown: (e: KeyboardEvent) => void;
                onBlur: () => void;
                onMousedown: () => void;
                tabindex: number;
            };
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:year" | "click:year")[], "update:modelValue" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            allowedYears: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            startYear: {
                type: NumberConstructor;
                default: number;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            endYear: {
                type: NumberConstructor;
                default: () => number;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onHover:year"?: ((...args: any[]) => any) | undefined;
            "onClick:year"?: ((...args: any[]) => any) | undefined;
        }, {
            color: string;
            mode: import("../va-date-picker/types").DatePickerMode;
            readonly: boolean;
            view: import("../va-date-picker/types").DatePickerView;
            highlightToday: boolean;
            allowedYears: (date: Date) => boolean;
            startYear: number;
            endYear: number;
        }, {}> | undefined>;
        focusCurrentPicker: () => any;
        isPickerReadonly: (pickerName: "month" | "day" | "year") => boolean;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day" | "update:view" | "hover:month" | "click:month" | "hover:year" | "click:year")[], "update:modelValue" | "hover:day" | "click:day" | "update:view" | "hover:month" | "click:month" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: PropType<string[]>;
            default: string[];
        };
        view: {
            type: PropType<import("../va-date-picker/types").DatePickerView>;
        };
        type: {
            type: PropType<import("../va-date-picker/types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        mode: {
            type: PropType<import("../va-date-picker/types").DatePickerMode>;
            default: string;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedYears: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        startYear: {
            type: NumberConstructor;
            default: number;
        };
        endYear: {
            type: NumberConstructor;
            default: () => number;
        };
        allowedMonths: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightWeekend: {
            type: BooleanConstructor;
            default: boolean;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            default: string;
        };
        hideWeekDays: {
            type: BooleanConstructor;
            default: boolean;
        };
        showOtherMonths: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedDays: {
            type: PropType<(date: Date) => boolean>;
        };
        weekends: {
            type: PropType<(date: Date) => boolean>;
        };
        ariaNextPeriodLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaPreviousPeriodLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaSwitchViewLabel: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
        "onUpdate:view"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        stateful: boolean;
        type: import("../va-date-picker/types").DatePickerType;
        color: string;
        mode: import("../va-date-picker/types").DatePickerMode;
        disabled: boolean;
        readonly: boolean;
        highlightWeekend: boolean;
        highlightToday: boolean;
        monthNames: string[];
        weekdayNames: string[];
        firstWeekday: "Monday" | "Sunday";
        hideWeekDays: boolean;
        showOtherMonths: boolean;
        ariaNextPeriodLabel: string;
        ariaPreviousPeriodLabel: string;
        ariaSwitchViewLabel: string;
        allowedMonths: (date: Date) => boolean;
        allowedYears: (date: Date) => boolean;
        startYear: number;
        endYear: number;
        weekendsColor: string;
    }, {}> | undefined>;
    valueText: import("vue").ComputedRef<string>;
    valueWithoutText: import("vue").WritableComputedRef<DateInputValue>;
    valueComputed: import("vue").WritableComputedRef<string | number | {
        toString: () => string;
        toDateString: () => string;
        toTimeString: () => string;
        toLocaleString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleDateString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleTimeString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        valueOf: () => number;
        getTime: () => number;
        getFullYear: () => number;
        getUTCFullYear: () => number;
        getMonth: () => number;
        getUTCMonth: () => number;
        getDate: () => number;
        getUTCDate: () => number;
        getDay: () => number;
        getUTCDay: () => number;
        getHours: () => number;
        getUTCHours: () => number;
        getMinutes: () => number;
        getUTCMinutes: () => number;
        getSeconds: () => number;
        getUTCSeconds: () => number;
        getMilliseconds: () => number;
        getUTCMilliseconds: () => number;
        getTimezoneOffset: () => number;
        setTime: (time: number) => number;
        setMilliseconds: (ms: number) => number;
        setUTCMilliseconds: (ms: number) => number;
        setSeconds: (sec: number, ms?: number | undefined) => number;
        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setDate: (date: number) => number;
        setUTCDate: (date: number) => number;
        setMonth: (month: number, date?: number | undefined) => number;
        setUTCMonth: (month: number, date?: number | undefined) => number;
        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        toUTCString: () => string;
        toISOString: () => string;
        toJSON: (key?: any) => string;
        [Symbol.toPrimitive]: {
            (hint: "default"): string;
            (hint: "string"): string;
            (hint: "number"): number;
            (hint: string): string | number;
        };
    } | (string | number | {
        toString: () => string;
        toDateString: () => string;
        toTimeString: () => string;
        toLocaleString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleDateString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleTimeString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        valueOf: () => number;
        getTime: () => number;
        getFullYear: () => number;
        getUTCFullYear: () => number;
        getMonth: () => number;
        getUTCMonth: () => number;
        getDate: () => number;
        getUTCDate: () => number;
        getDay: () => number;
        getUTCDay: () => number;
        getHours: () => number;
        getUTCHours: () => number;
        getMinutes: () => number;
        getUTCMinutes: () => number;
        getSeconds: () => number;
        getUTCSeconds: () => number;
        getMilliseconds: () => number;
        getUTCMilliseconds: () => number;
        getTimezoneOffset: () => number;
        setTime: (time: number) => number;
        setMilliseconds: (ms: number) => number;
        setUTCMilliseconds: (ms: number) => number;
        setSeconds: (sec: number, ms?: number | undefined) => number;
        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setDate: (date: number) => number;
        setUTCDate: (date: number) => number;
        setMonth: (month: number, date?: number | undefined) => number;
        setUTCMonth: (month: number, date?: number | undefined) => number;
        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        toUTCString: () => string;
        toISOString: () => string;
        toJSON: (key?: any) => string;
        [Symbol.toPrimitive]: {
            (hint: "default"): string;
            (hint: "string"): string;
            (hint: "number"): number;
            (hint: string): string | number;
        };
    })[] | {
        start?: string | number | {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        } | null | undefined;
        end?: string | number | {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        } | null | undefined;
    } | null | undefined>;
    isOpenSync: import("vue").WritableComputedRef<boolean>;
    onInputTextChanged: ({ target }: Event) => void;
    trapFocus: () => void;
    isInputFocused: import("vue").WritableComputedRef<boolean>;
    isPickerFocused: import("vue").WritableComputedRef<boolean | undefined> & {
        focusIfNothingIfFocused: () => void;
        focusPreviousElement: () => void;
    };
    input: import("vue").ShallowRef<HTMLInputElement | undefined>;
    inputWrapperProps: import("vue").ComputedRef<{
        focused: boolean | undefined;
        error: boolean;
        errorMessages: string[];
        readonly: boolean;
        modelValue: any;
        color: string;
        success: boolean;
        loading: boolean;
        disabled: boolean;
        label: string;
        placeholder: string;
        messages: string | string[];
        dirty: boolean;
        errorCount: string | number;
        immediateValidation: boolean;
        requiredMark: boolean;
        counter: boolean;
        innerLabel: boolean;
        inputAriaLabel: string;
        preset?: string | undefined;
        name?: string | undefined;
        background?: string | undefined;
        rules?: import("../../composables").ValidationRule<any>[] | undefined;
        inputAriaLabelledby?: string | undefined;
        inputAriaDescribedby?: string | undefined;
    }>;
    inputListeners: import("vue").ComputedRef<{
        focus: () => void;
        blur: () => void;
    }>;
    inputAttributesComputed: import("vue").ComputedRef<{
        'aria-invalid': boolean;
        'aria-errormessage': string;
        readonly: boolean;
        disabled: boolean;
        tabindex: number;
        placeholder: string;
        value: string;
        ariaLabel: string;
        ariaRequired: boolean;
        ariaDisabled: boolean;
        ariaReadOnly: boolean;
    }>;
    datePickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<Omit<{
        modelValue: {
            type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: PropType<string[]>;
            default: string[];
        };
        view: {
            type: PropType<import("../va-date-picker/types").DatePickerView>;
        };
        type: {
            type: PropType<import("../va-date-picker/types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        mode: {
            type: PropType<import("../va-date-picker/types").DatePickerMode>;
            default: string;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedYears: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        startYear: {
            type: NumberConstructor;
            default: number;
        };
        endYear: {
            type: NumberConstructor;
            default: () => number;
        };
        allowedMonths: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightWeekend: {
            type: BooleanConstructor;
            default: boolean;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            default: string;
        };
        hideWeekDays: {
            type: BooleanConstructor;
            default: boolean;
        };
        showOtherMonths: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedDays: {
            type: PropType<(date: Date) => boolean>;
        };
        weekends: {
            type: PropType<(date: Date) => boolean>;
        };
        ariaNextPeriodLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaPreviousPeriodLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaSwitchViewLabel: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
    }, "">>>;
    dropdownPropsComputed: import("vue").ComputedRef<{
        stateful: boolean;
        closeOnAnchorClick: boolean;
        keyboardNavigation: boolean;
        innerAnchorSelector: string;
        trigger: "none";
        role: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">;
        ariaLabel: string;
        disabled: boolean;
        placement: import("../../composables").PlacementWithAlias;
        offset: import("../va-dropdown/types").DropdownOffsetProp;
        anchorSelector: string;
        readonly: boolean;
        closeOnClickOutside: boolean;
        closeOnFocusOutside: boolean;
        closeOnContentClick: boolean;
        hoverOverTimeout: number;
        hoverOutTimeout: number;
        isContentHoverable: boolean;
        keepAnchorWidth: boolean;
        verticalScrollOnOverflow: boolean;
        cursor: boolean | import("../va-dropdown/types").CursorAnchor;
        autoPlacement: boolean;
        stickToEdges: boolean;
        target?: import("../../composables").MaybeHTMLElementOrSelector;
        anchor?: import("../../composables").MaybeHTMLElementOrSelector;
        teleport?: import("../../composables").MaybeHTMLElementOrSelector;
    }>;
    filterSlots: import("vue").ComputedRef<string[]>;
    canBeCleared: import("vue").ComputedRef<boolean>;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
        tabindex: number;
    }>;
    iconProps: import("vue").ComputedRef<{
        role: string;
        ariaHidden: boolean;
        name: string;
        color: string;
        tabindex: number;
    }>;
    cursorStyleComputed: import("vue").ComputedRef<{
        cursor?: undefined;
    } | {
        cursor: string;
    }>;
    hideAndFocus: () => void;
    toggleDropdown: (event: Event | KeyboardEvent) => void;
    showDropdown: () => void;
    focusInputOrPicker: () => void;
    focusDatePicker: () => void;
    reset: () => void;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    clearValue: {
        type: PropType<DateInputModelValue>;
        default: undefined;
    };
    modelValue: {
        type: PropType<DateInputModelValue>;
    };
    resetOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        default: () => number[];
        type: PropType<import("../va-dropdown/types").DropdownOffsetProp>;
    };
    format: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    formatDate: {
        type: PropType<(date: Date) => string>;
        default: (d: Date) => string;
    };
    parse: {
        type: PropType<(input: string) => DateInputValue>;
    };
    parseDate: {
        type: PropType<(input: string) => Date>;
    };
    parseValue: {
        type: PropType<(date: DateInputModelValue) => import("../va-date-picker/types").DatePickerModelValue>;
    };
    delimiter: {
        type: StringConstructor;
        default: string;
    };
    rangeDelimiter: {
        type: StringConstructor;
        default: string;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    ariaToggleDropdownLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaResetLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSelectedDateLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: PropType<import("../../composables").ValidationRule<DateInputModelValue>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    type: {
        type: PropType<import("../va-date-picker/types").DatePickerType>;
        default: string;
    };
    mode: {
        type: PropType<import("../va-date-picker/types").DatePickerMode>;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: PropType<import("../va-date-picker/types").DatePickerView>;
    };
    highlightWeekend: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    monthNames: {
        type: PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        default: string[];
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        default: string;
    };
    hideWeekDays: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOtherMonths: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
    };
    ariaNextPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaPreviousPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSwitchViewLabel: {
        type: StringConstructor;
        default: string;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    startYear: {
        type: NumberConstructor;
        default: number;
    };
    endYear: {
        type: NumberConstructor;
        default: () => number;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    background: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    counter: {
        type: BooleanConstructor;
    };
    innerLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    inputAriaLabelledby: {
        type: StringConstructor;
    };
    inputAriaDescribedby: {
        type: StringConstructor;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    closeOnChange: {
        type: BooleanConstructor;
        default: null;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    target: {
        type: PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    role: {
        type: PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">>;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    anchor: {
        type: PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    placement: {
        type: PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnFocusOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    verticalScrollOnOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: PropType<boolean | import("../va-dropdown/types").CursorAnchor>;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    stateful: boolean;
    type: import("../va-date-picker/types").DatePickerType;
    target: import("../../composables").MaybeHTMLElementOrSelector;
    color: string;
    success: boolean;
    role: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none">;
    mode: import("../va-date-picker/types").DatePickerMode;
    icon: string;
    ariaLabel: string;
    anchor: import("../../composables").MaybeHTMLElementOrSelector;
    error: boolean;
    loading: boolean;
    disabled: boolean;
    leftIcon: boolean;
    placement: import("../../composables").PlacementWithAlias;
    offset: import("../va-dropdown/types").DropdownOffsetProp;
    label: string;
    anchorSelector: string;
    trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
    readonly: boolean;
    closeOnClickOutside: boolean;
    closeOnFocusOutside: boolean;
    closeOnAnchorClick: boolean;
    closeOnContentClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    isContentHoverable: boolean;
    keepAnchorWidth: boolean;
    verticalScrollOnOverflow: boolean;
    cursor: boolean | import("../va-dropdown/types").CursorAnchor;
    autoPlacement: boolean;
    stickToEdges: boolean;
    teleport: import("../../composables").MaybeHTMLElementOrSelector;
    placeholder: string;
    messages: string | string[];
    dirty: boolean;
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<DateInputModelValue>[];
    immediateValidation: boolean;
    requiredMark: boolean;
    counter: boolean;
    innerLabel: boolean;
    inputAriaLabel: string;
    ariaResetLabel: string;
    clearable: boolean;
    clearableIcon: string;
    clearValue: DateInputModelValue;
    manualInput: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    monthNames: string[];
    weekdayNames: string[];
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
    ariaNextPeriodLabel: string;
    ariaPreviousPeriodLabel: string;
    ariaSwitchViewLabel: string;
    allowedMonths: (date: Date) => boolean;
    allowedYears: (date: Date) => boolean;
    startYear: number;
    endYear: number;
    weekendsColor: string;
    resetOnClose: boolean;
    formatDate: (date: Date) => string;
    delimiter: string;
    rangeDelimiter: string;
    ariaToggleDropdownLabel: string;
    ariaSelectedDateLabel: string;
    closeOnChange: boolean;
    isOpen: boolean;
}, {}>;
export default _default;
