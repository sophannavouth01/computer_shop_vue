import { PropType } from 'vue';
import { SplitLimit, SnappingMark } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    maximization: {
        type: BooleanConstructor;
        default: boolean;
    };
    maximizeStart: {
        type: BooleanConstructor;
        default: boolean;
    };
    limits: {
        type: PropType<[SplitLimit, SplitLimit]>;
        default: () => number[];
    };
    snapping: {
        type: PropType<SnappingMark[]>;
        default: undefined;
    };
    snappingRange: {
        type: PropType<string | number>;
        default: number;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    splitPanelsContainer: import("vue").ShallowRef<HTMLElement | undefined>;
    containerSize: import("vue").Ref<any>;
    startDragging: (e: MouseEvent | TouchEvent) => void;
    getPanelStyle: (position: 'start' | 'end') => {
        [x: string]: string;
    };
    maximizePanel: () => void;
    classComputed: {
        "va-split--horizontal": boolean | undefined;
        "va-split--vertical": boolean | undefined;
        "va-split--dragging": boolean | undefined;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-split--horizontal": boolean | undefined;
            "va-split--vertical": boolean | undefined;
            "va-split--dragging": boolean | undefined;
        }>;
        readonly asArray: import("vue").ComputedRef<("va-split--horizontal" | "va-split--vertical" | "va-split--dragging")[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    draggerStyleComputed: import("vue").ComputedRef<{
        cursor?: undefined;
    } | {
        cursor: string;
    }>;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    maximization: {
        type: BooleanConstructor;
        default: boolean;
    };
    maximizeStart: {
        type: BooleanConstructor;
        default: boolean;
    };
    limits: {
        type: PropType<[SplitLimit, SplitLimit]>;
        default: () => number[];
    };
    snapping: {
        type: PropType<SnappingMark[]>;
        default: undefined;
    };
    snappingRange: {
        type: PropType<string | number>;
        default: number;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    modelValue: number;
    stateful: boolean;
    vertical: boolean;
    ariaLabel: string;
    disabled: boolean;
    maximization: boolean;
    maximizeStart: boolean;
    limits: [SplitLimit, SplitLimit];
    snapping: SnappingMark[];
    snappingRange: string | number;
}, {}>;
export default _default;
