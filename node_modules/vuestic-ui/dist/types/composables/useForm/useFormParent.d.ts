import { type Ref } from 'vue';
import { Form, FormFiled } from './types';
type FormParentOptions = {
    hideLoading: boolean;
    hideErrors: boolean;
    hideErrorMessages: boolean;
    immediate: boolean;
};
export declare const createFormContext: <Names extends string>(options: FormParentOptions) => {
    immediate: import("vue").ComputedRef<boolean>;
    fields: import("vue").ComputedRef<{
        name: Names | undefined;
        value?: unknown;
        isValid: boolean;
        isLoading: boolean;
        isDirty: boolean;
        errorMessages: string[];
        validate: () => boolean;
        validateAsync: () => Promise<boolean>;
        reset: () => void;
        resetValidation: () => void;
        focus: () => void;
    }[]>;
    doShowError: import("vue").ComputedRef<boolean>;
    doShowErrorMessages: import("vue").ComputedRef<boolean>;
    doShowLoading: import("vue").ComputedRef<boolean>;
    isFormDirty: Ref<boolean>;
    registerField: (uid: number, field: FormFiled<Names>) => void;
    unregisterField: (uid: number) => void;
};
export declare const useFormParent: <Names extends string = string>(options: FormParentOptions) => Form<Names>;
export {};
