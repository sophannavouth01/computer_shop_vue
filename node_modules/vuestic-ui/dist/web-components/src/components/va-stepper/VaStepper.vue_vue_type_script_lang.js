import { defineComponent, shallowRef, ref, watch, computed } from "vue";
import { V as VaStepperControls } from "./VaStepperControls.js";
import { V as VaStepperStepButton } from "./VaStepperStepButton.js";
import { u as unFunction } from "../../utils/un-function.js";
import { a as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
const _sfc_main = defineComponent({
  name: "VaStepper",
  components: { VaStepperControls, VaStepperStepButton },
  props: {
    ...useStatefulProps,
    modelValue: { type: Number, default: 0 },
    steps: {
      type: Array,
      default: () => [],
      required: true
    },
    color: { type: String, default: "primary" },
    vertical: { type: Boolean, default: false },
    navigationDisabled: { type: Boolean, default: false },
    controlsHidden: { type: Boolean, default: false },
    nextDisabled: { type: Boolean, default: false },
    finishButtonHidden: { type: Boolean, default: false },
    ariaLabel: { type: String, default: "$t:progress" },
    linear: { type: Boolean, default: false }
  },
  emits: ["update:modelValue", "finish", "update:steps"],
  setup(props, { emit }) {
    const stepperNavigation = shallowRef();
    const { valueComputed: modelValue } = useStateful(props, emit, "modelValue");
    const focusedStep = ref({ trigger: false, stepIndex: props.navigationDisabled ? -1 : props.modelValue });
    const { getColor } = useColors();
    const isNextStepDisabled = (index) => props.nextDisabled && index > modelValue.value;
    const findFirstNonDisabled = (from, direction) => {
      while (from >= 0 && from < props.steps.length) {
        from += direction;
        const step = props.steps[from];
        if (!step) {
          return;
        }
        if (!step.disabled) {
          return step;
        }
      }
    };
    const findFirstWithErrorIndex = (from, direction) => {
      while (from >= 0 && from < props.steps.length) {
        from += direction;
        const step = props.steps[from];
        if (!step) {
          return;
        }
        if (step.hasError === true) {
          return from;
        }
      }
    };
    const validateMovingToStep = (stepIndex) => {
      var _a;
      const newStep = props.steps[stepIndex];
      const currentStep = props.steps[modelValue.value];
      const beforeNewStep = findFirstNonDisabled(stepIndex, -1);
      if (newStep.disabled) {
        return false;
      }
      if (props.linear && stepIndex < modelValue.value) {
        return true;
      }
      const nextNonError = findFirstWithErrorIndex(modelValue.value, 1);
      if (props.linear && nextNonError !== void 0 && nextNonError < stepIndex) {
        return false;
      }
      if (((_a = currentStep.beforeLeave) == null ? void 0 : _a.call(currentStep, currentStep, newStep)) === false) {
        return false;
      }
      if (currentStep.completed === void 0) {
        currentStep.completed = true;
      }
      if (props.linear && beforeNewStep && !beforeNewStep.completed) {
        return false;
      }
      if (props.linear && unFunction(currentStep.hasError, currentStep)) {
        return false;
      }
      return true;
    };
    const setStep = (index) => {
      if (!validateMovingToStep(index)) {
        return;
      }
      emit("update:modelValue", index);
    };
    const setFocus = (direction) => {
      if (props.navigationDisabled) {
        return;
      }
      if (direction === "next") {
        setFocusNextStep(1);
      } else {
        setFocusPrevStep(1);
      }
    };
    const setFocusNextStep = (idx) => {
      const newValue = focusedStep.value.stepIndex + idx;
      if (isNextStepDisabled(newValue)) {
        return;
      }
      if (newValue < props.steps.length) {
        if (props.steps[newValue].disabled) {
          setFocusNextStep(idx + 1);
          return;
        }
        focusedStep.value.stepIndex = newValue;
        focusedStep.value.trigger = true;
      } else {
        for (let availableIdx = 0; availableIdx < props.steps.length; availableIdx++) {
          if (!props.steps[availableIdx].disabled) {
            focusedStep.value.stepIndex = availableIdx;
            focusedStep.value.trigger = true;
            break;
          }
        }
      }
    };
    const setFocusPrevStep = (idx) => {
      const newValue = focusedStep.value.stepIndex - idx;
      if (newValue >= 0) {
        if (props.steps[newValue].disabled) {
          setFocusPrevStep(idx + 1);
          return;
        }
        focusedStep.value.stepIndex = newValue;
        focusedStep.value.trigger = true;
      } else {
        for (let availableIdx = props.steps.length - 1; availableIdx >= 0; availableIdx--) {
          if (!props.steps[availableIdx].disabled && !isNextStepDisabled(availableIdx)) {
            focusedStep.value.stepIndex = availableIdx;
            focusedStep.value.trigger = true;
            break;
          }
        }
      }
    };
    const resetFocus = () => {
      requestAnimationFrame(() => {
        var _a;
        if (!((_a = stepperNavigation.value) == null ? void 0 : _a.contains(document.activeElement))) {
          focusedStep.value.stepIndex = props.modelValue;
          focusedStep.value.trigger = false;
        }
      });
    };
    watch(() => props.modelValue, () => {
      focusedStep.value.stepIndex = props.modelValue;
      focusedStep.value.trigger = false;
    });
    const nextStep = (stepsToSkip = 0) => {
      const targetIndex = modelValue.value + 1 + stepsToSkip;
      if (!props.steps[targetIndex]) {
        return;
      }
      if (props.steps[targetIndex].disabled) {
        nextStep(stepsToSkip + 1);
      }
      setStep(targetIndex);
    };
    const prevStep = (stepsToSkip = 0) => {
      const targetIndex = modelValue.value - 1 - stepsToSkip;
      if (!props.steps[targetIndex]) {
        return;
      }
      if (props.steps[targetIndex].disabled) {
        prevStep(stepsToSkip + 1);
      }
      setStep(targetIndex);
    };
    const stepControls = { setStep, nextStep, prevStep };
    const getIterableSlotData = (step, index) => ({
      ...stepControls,
      focus: focusedStep,
      isActive: props.modelValue === index,
      isCompleted: props.modelValue > index,
      isLastStep: props.steps.length - 1 === index,
      isNextStepDisabled: isNextStepDisabled(index),
      index,
      step
    });
    const { tp } = useTranslation();
    return {
      stepperNavigation,
      resetFocus,
      focusedStep,
      isNextStepDisabled,
      getColor,
      stepControls,
      getIterableSlotData,
      onArrowKeyPress: (direction) => {
        setFocus(direction);
      },
      onValueChange: () => {
        focusedStep.value.stepIndex = props.modelValue;
        focusedStep.value.trigger = true;
      },
      ariaAttributesComputed: computed(() => ({
        role: "group",
        "aria-label": tp(props.ariaLabel),
        "aria-orientation": props.vertical ? "vertical" : "horizontal"
      })),
      getStepperButtonColor(index) {
        var _a;
        return ((_a = props.steps[index]) == null ? void 0 : _a.hasError) ? "danger" : getColor(props.color);
      },
      completeStep: (shouldCompleteStep) => {
        const steps = { ...props.steps };
        if (shouldCompleteStep === true) {
          steps[props.modelValue].hasError = false;
        }
        steps[props.modelValue].completed = shouldCompleteStep ?? true;
        emit("update:steps", steps);
      },
      setError: (shouldSetError) => {
        const steps = { ...props.steps };
        steps[props.modelValue].hasError = shouldSetError ?? true;
        steps[props.modelValue].completed = !shouldSetError;
        emit("update:steps", steps);
      }
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaStepper.vue_vue_type_script_lang.js.map
