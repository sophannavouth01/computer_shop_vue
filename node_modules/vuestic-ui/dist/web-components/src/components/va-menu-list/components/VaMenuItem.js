import { _ as _sfc_main } from "./VaMenuItem.vue_vue_type_script_lang.js";
import { resolveComponent, openBlock, createElementBlock, mergeProps, toHandlers, withKeys, createElementVNode, renderSlot, createBlock, createCommentVNode, toDisplayString } from "vue";
import { _ as _export_sfc } from "../../../../plugin-vue_export-helper.js";
const _style_0 = '.va-menu-item {\n  display: table-row;\n  cursor: pointer;\n  position: relative;\n  z-index: 0;\n}\n.va-menu-item::after {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  content: "";\n  background: var(--va-menu-item-hover-color);\n  opacity: 0;\n  z-index: -1;\n  transition: all 0.3s ease-in-out;\n}\n.va-menu-item__cell {\n  display: table-cell;\n  vertical-align: middle;\n}\n.va-menu-item__cell--center {\n  padding: 0 var(--va-menu-padding-x);\n  text-align: left;\n  width: 100%;\n}\n.va-menu-item__cell--left, .va-menu-item__cell--right {\n  padding: 0 var(--va-menu-padding-x);\n  text-align: center;\n  min-width: 1px;\n  white-space: nowrap;\n}\n.va-menu-item__cell--left:empty, .va-menu-item__cell--right:empty {\n  padding: 0;\n}\n.va-menu-item__cell--left {\n  padding-right: 0;\n}\n.va-menu-item__cell--right {\n  padding-left: 0;\n}\n.va-menu-item:hover::after {\n  background: var(--va-menu-item-hover-color);\n  opacity: var(--va-menu-item-hover-opacity);\n}\n.va-menu-item--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n.va-menu-item--keyboard-focus {\n  outline: 2px solid var(--va-focus) !important;\n  border-radius: 2px;\n}';
const _hoisted_1 = { class: "va-menu-item__cell va-menu-item__cell--left" };
const _hoisted_2 = { class: "va-menu-item__cell va-menu-item__cell--center" };
const _hoisted_3 = { class: "va-menu-item__content" };
const _hoisted_4 = { class: "va-menu-item__cell va-menu-item__cell--right" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_VaIcon = resolveComponent("VaIcon");
  return openBlock(), createElementBlock("tr", mergeProps({ class: "va-menu-item" }, _ctx.makeMenuItemAttributes({ disabled: _ctx.disabled }), toHandlers(_ctx.keyboardFocusListeners, true), {
    class: {
      "va-menu-item--disabled": _ctx.disabled,
      "va-menu-item--keyboard-focus": _ctx.hasKeyboardFocus
    },
    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("selected")),
    onKeydown: _cache[1] || (_cache[1] = withKeys(($event) => _ctx.$emit("selected"), ["enter", "space"]))
  }), [
    createElementVNode("td", _hoisted_1, [
      renderSlot(_ctx.$slots, "left-icon", {}, () => [
        _ctx.icon ? (openBlock(), createBlock(_component_VaIcon, {
          key: 0,
          class: "va-menu-item__icon--left",
          name: _ctx.icon
        }, null, 8, ["name"])) : createCommentVNode("", true)
      ])
    ]),
    createElementVNode("td", _hoisted_2, [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createElementVNode("a", _hoisted_3, toDisplayString(_ctx.name), 1)
      ])
    ]),
    createElementVNode("td", _hoisted_4, [
      renderSlot(_ctx.$slots, "right-icon", {}, () => [
        _ctx.rightIcon ? (openBlock(), createBlock(_component_VaIcon, {
          key: 0,
          class: "va-menu-item__icon--right",
          name: _ctx.rightIcon
        }, null, 8, ["name"])) : createCommentVNode("", true)
      ])
    ])
  ], 16);
}
const _VaMenuItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(_sfc_main.components ? Object.values(_sfc_main.components) : []).map((c) => c.styles || []).flat(), _style_0]]]);
export {
  _VaMenuItem as _
};
//# sourceMappingURL=VaMenuItem.js.map
