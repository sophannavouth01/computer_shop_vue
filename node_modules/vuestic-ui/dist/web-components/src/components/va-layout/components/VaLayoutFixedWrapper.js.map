{"version":3,"file":"VaLayoutFixedWrapper.js","sources":["../../../../../../src/components/va-layout/components/VaLayoutFixedWrapper.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-layout-fixed-wrapper\"\n    :style=\"[{\n      height: size && direction === 'vertical' ? size.height + 'px' : 'auto',\n      width: size && direction === 'horizontal' ? size.width + 'px' : 'auto',\n    }]\"\n  >\n    <VaResizeObserver\n      class=\"va-layout-fixed-wrapper__content\"\n      :class=\"`va-layout-fixed-wrapper__content--${area}`\"\n      @resize=\"size = $event\"\n    >\n      <slot />\n    </VaResizeObserver>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, defineComponent, type PropType, computed } from 'vue'\nimport VaResizeObserver from './VaResizeObserver.vue'\nimport {\n  AreaName,\n} from '../hooks/useGridTemplateArea'\nimport { useFixedLayoutChild } from '../hooks/useLayout'\n\nexport default defineComponent({\n  name: 'VaLayoutFixedWrapper',\n\n  components: { VaResizeObserver },\n\n  props: {\n    area: { type: String as PropType<AreaName>, required: true },\n  },\n\n  setup (props) {\n    const size = ref<DOMRectReadOnly | null>(null)\n\n    const direction = computed(() => {\n      if (props.area === 'top' || props.area === 'bottom') {\n        return 'vertical'\n      } else {\n        return 'horizontal'\n      }\n    })\n\n    const getPxOrZero = (value: number | null) => {\n      if (!value) { return 0 + 'px' }\n\n      return value + 'px'\n    }\n\n    const styles = computed(() => {\n      if (direction.value === 'vertical') {\n        return { width: `calc(100% - ${getPxOrZero(paddings.value.left)} - ${getPxOrZero(paddings.value.right)})`, [props.area]: 0 }\n      } else {\n        return { height: `calc(100% - ${getPxOrZero(paddings.value.top)} - ${getPxOrZero(paddings.value.bottom)})`, [props.area]: 0 }\n      }\n    })\n\n    const { paddings } = useFixedLayoutChild(props.area, size)\n\n    const computedStyle = computed(() => {\n      return Object.keys(paddings.value).reduce((acc, key) => {\n        if (key === props.area) { return acc }\n\n        return {\n          ...acc,\n          [key]: `${paddings.value[key as AreaName]}px`,\n        }\n      }, {})\n    })\n\n    return {\n      direction,\n      computedStyle,\n      paddings,\n      size,\n      styles,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-layout-fixed-wrapper {\n  position: relative;\n  flex: 1;\n\n  &__content {\n    position: fixed;\n    width: v-bind(\"styles.width\");\n    height: v-bind(\"styles.height\");\n\n    @media print {\n      position: relative !important;\n      height: max-content !important;\n      width: max-content !important;\n    }\n\n    &--top {\n      top: 0;\n    }\n\n    &--bottom {\n      bottom: 0;\n    }\n\n    &--right {\n      right: 0;\n    }\n\n    &--left {\n      left: 0;\n    }\n  }\n}\n</style>\n"],"names":["_resolveComponent","_openBlock","_createElementBlock","_normalizeStyle","_createVNode","_normalizeClass"],"mappings":";;;;;sCACEA,iBAcM,kBAAA;AAZE,SAAAC,UAAA,GAAAC,mBAAA,OAAA;AAAA,IAAA,OAAA;AAAA,IAAwG,OAAAC,eAAA,CAAA;AAAA,MAAA,QAAA,KAAA,QAAA,KAAA,cAAA,aAAA,KAAA,KAAA,SAAA,OAAA;AAAA;IAK9G,CAAA,CAAA;AAAA,EAAA,GAAA;AAAA,IAGSC,YAAA,6BAAA;AAAA,MAAA,OAAAC,eAAA,CAAA,oCAAA,qCAAA,KAAA,MAAA,CAAA;AAAA,wBAEP,MAAQ,OAAA,CAAA,IAAA,CAAA,WAAA,KAAA,OAAA;AAAA,IAAA,GAAA;AAAA;;;;;;;;"}