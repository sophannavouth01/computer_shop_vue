{"version":3,"file":"VaDateInput.mjs","sources":["../../../../../src/components/va-date-input/VaDateInput.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    v-model=\"isOpenSync\"\n    class=\"va-date-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-bind=\"dropdownPropsComputed\"\n    @open=\"focusDatePicker\"\n    role=\"none\"\n  >\n    <template #anchor>\n      <slot name=\"input\" v-bind=\"{ valueText, inputAttributes: inputAttributesComputed, inputWrapperProps, inputListeners }\">\n        <va-input-wrapper\n          class=\"va-date-input__anchor\"\n          :style=\"cursorStyleComputed\"\n          v-bind=\"inputWrapperProps\"\n          v-on=\"inputListeners\"\n          :model-value=\"valueText\"\n          @click.stop=\"toggleDropdown\"\n          @change=\"onInputTextChanged\"\n        >\n          <template\n            v-for=\"name in filterSlots\"\n            :key=\"name\"\n            v-slot:[name]=\"slotScope\"\n          >\n            <slot :name=\"name\" v-bind=\"slotScope\" />\n          </template>\n\n          <template #prependInner=\"slotScope\" v-if=\"$slots.prependInner || $props.leftIcon\">\n            <slot name=\"prependInner\" v-bind=\"slotScope\" />\n            <va-icon\n              v-if=\"$props.leftIcon\"\n              :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n              v-bind=\"iconProps\"\n              @click.stop=\"showDropdown\"\n              @keydown.enter.stop=\"showDropdown\"\n              @keydown.space.stop=\"showDropdown\"\n            />\n          </template>\n\n          <template #icon>\n            <va-icon\n              v-if=\"canBeCleared\"\n              :aria-label=\"tp($props.ariaResetLabel)\"\n              v-bind=\"{ ...iconProps, ...clearIconProps }\"\n              @click.stop=\"reset\"\n              @keydown.enter.stop=\"reset\"\n              @keydown.space.stop=\"reset\"\n            />\n            <va-icon\n              v-if=\"!$props.leftIcon && $props.icon\"\n              :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n              v-bind=\"iconProps\"\n              @click.stop=\"showDropdown\"\n              @keydown.enter.stop=\"showDropdown\"\n              @keydown.space.stop=\"showDropdown\"\n            />\n          </template>\n        </va-input-wrapper>\n      </slot>\n    </template>\n\n    <va-dropdown-content class=\"va-date-input__dropdown-content\" @keydown.esc=\"focus()\" role=\"dialog\">\n      <va-date-picker\n        ref=\"datePicker\"\n        v-bind=\"datePickerProps\"\n        v-model=\"valueWithoutText\"\n        @click:day=\"$emit('click:day', $event)\"\n        @click:month=\"$emit('click:month', $event)\"\n        @click:year=\"$emit('click:year', $event)\"\n        @hover:day=\"$emit('hover:day', $event)\"\n        @hover:month=\"$emit('hover:month', $event)\"\n        @hover:year=\"$emit('hover:year', $event)\"\n        @update:view=\"($event) => { $nextTick(() => trapFocus()); $emit('update:view', $event) }\"\n      >\n        <template\n          v-for=\"(_, name) in $slots\"\n          :key=\"name\"\n          v-slot:[name]=\"bind\"\n        >\n          <slot :name=\"name\" v-bind=\"bind\" />\n        </template>\n      </va-date-picker>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  PropType,\n  toRefs,\n  watch,\n  ref,\n  shallowRef,\n  nextTick,\n  Ref,\n} from 'vue'\nimport omit from 'lodash/omit'\n\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from '../../utils/component-options'\nimport {\n  useComponentPresetProp,\n  useClearable, useClearableEmits, useClearableProps,\n  useValidation, useValidationEmits, useValidationProps, ValidationProps,\n  useStateful, useStatefulEmits,\n  useParsable,\n  useDropdownable,\n  useDropdownableProps,\n  useDropdownableEmits,\n  useFocus, useFocusEmits, useTranslation, useFocusDeep, useTrapFocus,\n} from '../../composables'\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\nimport { useDateParser } from './hooks/input-text-parser'\nimport { parseModelValue } from './hooks/model-value-parser'\n\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/utils/date-utils'\n\nimport type { DateInputModelValue, DateInputValue } from './types'\n\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\nimport { VaInputWrapper } from '../va-input-wrapper'\nimport { VaIcon } from '../va-icon'\nimport { unwrapEl } from '../../utils/unwrapEl'\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, ['focused', 'maxLength', 'counterValue'])\nconst VaDatePickerProps = extractComponentProps(VaDatePicker)\nconst VaDropdownProps = extractComponentProps(VaDropdown,\n  ['innerAnchorSelector', 'stateful', 'keyboardNavigation', 'modelValue', 'trigger'],\n)\n\nexport default defineComponent({\n  name: 'VaDateInput',\n\n  components: {\n    VaDropdown,\n    VaDropdownContent,\n    VaDatePicker,\n    VaInputWrapper,\n    VaIcon,\n  },\n\n  props: {\n    ...useDropdownableProps,\n    ...useClearableProps,\n    ...VaInputWrapperProps,\n    ...VaDatePickerProps,\n    ...useValidationProps as ValidationProps<DateInputModelValue>,\n    ...useComponentPresetProp,\n\n    clearValue: { type: Date as PropType<DateInputModelValue>, default: undefined },\n    modelValue: { type: [Date, Array, Object, String, Number] as PropType<DateInputModelValue> },\n\n    resetOnClose: { type: Boolean, default: true },\n    closeOnContentClick: { type: Boolean, default: false },\n    offset: { ...useDropdownableProps.offset, default: () => [2, 0] },\n\n    format: { type: Function as PropType<(date: DateInputModelValue) => string> },\n    formatDate: { type: Function as PropType<(date: Date) => string>, default: (d: Date) => d.toLocaleDateString() },\n    parse: { type: Function as PropType<(input: string) => DateInputValue> },\n    parseDate: { type: Function as PropType<(input: string) => Date> },\n    parseValue: { type: Function as PropType<typeof parseModelValue> },\n\n    delimiter: { type: String, default: ', ' },\n    rangeDelimiter: { type: String, default: ' ~ ' },\n    manualInput: { type: Boolean, default: false },\n\n    color: { type: String, default: 'primary' },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'va-calendar' },\n\n    ariaToggleDropdownLabel: { type: String, default: '$t:toggleDropdown' },\n    ariaResetLabel: { type: String, default: '$t:resetDate' },\n    ariaSelectedDateLabel: { type: String, default: '$t:selectedDate' },\n  },\n\n  emits: [\n    ...useFocusEmits,\n    ...extractComponentEmits(VaDatePicker),\n    ...useClearableEmits,\n    ...useValidationEmits,\n    ...useStatefulEmits,\n    ...useDropdownableEmits,\n    'update:text',\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, slots, attrs }) {\n    const input = shallowRef<HTMLInputElement>()\n    const datePicker = ref<typeof VaDatePicker>()\n\n    const { resetOnClose } = toRefs(props)\n    const { trapFocusIn, freeFocus } = useTrapFocus()\n\n    const trapFocus = () => {\n      const el = unwrapEl(datePicker.value)\n      if (!el) {\n        freeFocus()\n        return\n      }\n\n      trapFocusIn(el)\n    }\n\n    watch([datePicker], () => {\n      trapFocus()\n    })\n\n    const { valueComputed: statefulValue } = useStateful(props, emit)\n    const { isOpenSync, dropdownProps } = useDropdownable(props, emit, {\n      defaultCloseOnValueUpdate: computed(() => !Array.isArray(statefulValue.value)),\n    })\n\n    const { isFocused: isInputFocused, focus, blur, onFocus: focusListener, onBlur: blurListener } = useFocus(input)\n    const isPickerFocused = useFocusDeep(datePicker)\n\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\n\n    const {\n      valueComputed,\n      reset: resetInvalidRange,\n    } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled, props.parseValue)\n\n    watch(isOpenSync, (isOpened) => {\n      if (!isOpened && !isRangeModelValueGuardDisabled.value) { resetInvalidRange() }\n    })\n\n    const dateOrNothing = (date: Date | undefined | null) => date ? props.formatDate(date) : '...'\n\n    const { parseDateInputValue, isValid } = useDateParser(props)\n\n    watch(valueComputed, () => {\n      isValid.value = true\n    })\n\n    const modelValueToString = (value: DateInputModelValue): string => {\n      if (props.format) {\n        return props.format(valueComputed.value)\n      }\n\n      if (isDates(value)) {\n        return value.map((d) => props.formatDate(d)).join(props.delimiter)\n      }\n      if (isSingleDate(value)) {\n        return props.formatDate(value)\n      }\n      if (isRange(value)) {\n        return dateOrNothing(value.start) + props.rangeDelimiter + dateOrNothing(value.end)\n      }\n\n      throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\n    }\n\n    const {\n      text,\n      value: valueWithoutText,\n    } = useParsable(valueComputed, parseDateInputValue, modelValueToString)\n\n    const valueText = computed(() => {\n      if (!isValid.value) {\n        return ''\n      }\n\n      if (!valueComputed.value) {\n        if (!props.clearValue) { return '' }\n        return modelValueToString(props.clearValue)\n      }\n\n      return text.value\n    })\n\n    const onInputTextChanged = ({ target }: Event) => {\n      if (props.disabled) { return }\n\n      const parsedValue = parseDateInputValue((target as HTMLInputElement).value)\n\n      if (isValid.value) {\n        valueComputed.value = parsedValue\n      }\n    }\n\n    const reset = () => withoutValidation(() => {\n      statefulValue.value = props.clearValue\n      emit('clear')\n      resetValidation()\n    })\n\n    const hideAndFocus = (): void => {\n      isOpenSync.value = false\n      focus()\n    }\n\n    const focusDatePicker = (): void => {\n      nextTick(() => datePicker.value?.focusCurrentPicker())\n    }\n\n    const focusInputOrPicker = () => {\n      isOpenSync.value ? focusDatePicker() : focus()\n    }\n\n    const checkProhibitedDropdownOpening = (e?: KeyboardEvent) => {\n      if (isOpenSync.value) { return false }\n      if (props.disabled || props.readonly) { return true }\n      return props.manualInput && e?.code !== 'Space'\n    }\n\n    const toggleDropdown = (event: Event | KeyboardEvent) => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : undefined)) { return }\n\n      isOpenSync.value = !isOpenSync.value\n      nextTick(focusInputOrPicker)\n    }\n\n    // icon interaction\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      isOpenSync.value = true\n      nextTick(focusDatePicker)\n    }\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const hasError = computed(() => (!isValid.value && valueComputed.value !== props.clearValue) || computedError.value)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) { return {} }\n      if (props.manualInput) { return { cursor: 'text' } }\n      return { cursor: 'pointer' }\n    })\n\n    const iconTabindexComputed = computed(() => {\n      if (!props.manualInput) { return -1 }\n\n      return props.disabled || props.readonly ? -1 : 0\n    })\n\n    const iconProps = computed(() => ({\n      role: iconTabindexComputed.value === 0 ? 'button' : 'none',\n      ariaHidden: iconTabindexComputed.value === -1,\n      name: props.icon,\n      color: 'secondary',\n      tabindex: iconTabindexComputed.value,\n    }))\n\n    const filteredWrapperProps = filterComponentProps(VaInputWrapperProps)\n    const computedInputWrapperProps = computed(() => ({\n      ...filteredWrapperProps.value,\n      focused: isInputFocused.value || isPickerFocused.value,\n      error: hasError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        if (props.disabled) { return }\n\n        focusListener()\n\n        if (props.readonly) { return }\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        if (props.disabled) { return }\n\n        blurListener()\n\n        if (props.readonly) { return }\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    const { tp } = useTranslation()\n\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      placeholder: props.placeholder,\n      value: valueText.value,\n      ariaLabel: props.label || tp(props.ariaSelectedDateLabel),\n      ariaRequired: props.requiredMark,\n      ariaDisabled: props.disabled,\n      ariaReadOnly: props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const dropdownPropsComputed = computed(() => ({\n      ...dropdownProps.value,\n      stateful: false,\n      closeOnAnchorClick: false,\n      keyboardNavigation: true,\n      innerAnchorSelector: '.va-input-wrapper__field',\n      trigger: 'none' as const,\n    }))\n\n    return {\n      tp,\n      datePicker,\n      valueText,\n      valueWithoutText,\n      valueComputed,\n      isOpenSync,\n      onInputTextChanged,\n      trapFocus,\n\n      isInputFocused,\n      isPickerFocused,\n\n      input,\n      inputWrapperProps: computedInputWrapperProps,\n      inputListeners: computedInputListeners,\n      inputAttributesComputed,\n      datePickerProps: filterComponentProps(VaDatePickerProps),\n      dropdownPropsComputed,\n\n      filterSlots,\n      canBeCleared,\n      clearIconProps,\n      iconProps,\n      cursorStyleComputed,\n\n      hideAndFocus,\n      toggleDropdown,\n      showDropdown,\n      focusInputOrPicker,\n      focusDatePicker,\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n\n.va-date-input {\n  --va-date-picker-cell-size: 28px;\n\n  font-family: var(--va-font-family);\n\n  &__anchor {\n    flex: 1;\n  }\n\n  &__input {\n    &:read-only {\n      cursor: pointer;\n    }\n  }\n\n  &__dropdown-content {\n    display: flex;\n    justify-content: center;\n  }\n}\n</style>\n"],"names":["_resolveComponent","_openBlock","_createBlock","_mergeProps","_withCtx","_renderSlot","_normalizeProps","_guardReactiveProps","_createVNode","_toHandlers","_withModifiers","_createSlots","_createCommentVNode","_withKeys"],"mappings":"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"}