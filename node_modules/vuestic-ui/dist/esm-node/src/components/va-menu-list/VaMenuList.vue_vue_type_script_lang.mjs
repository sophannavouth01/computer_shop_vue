import { defineComponent, ref, computed, Fragment } from "vue";
import { _ as _VaMenuItem } from "./components/VaMenuItem.mjs";
import { _ as _VaMenuGroup } from "./components/VaMenuGroup.mjs";
import { u as useMenuKeyboardNavigation, m as makeMenuContainerAttributes } from "./composables/useMenuKeyboardNavigation.mjs";
import { u as useSelectableListProps, a as useSelectableList } from "../../composables/useSelectableList.mjs";
const _sfc_main = defineComponent({
  name: "VaMenuList",
  components: { VaMenuItem: _VaMenuItem, VaMenuGroup: _VaMenuGroup },
  props: {
    ...useSelectableListProps,
    options: { type: Array, default: () => [] }
  },
  emits: ["selected"],
  setup(props) {
    const container = ref();
    useMenuKeyboardNavigation(container);
    const { getText, getValue, getDisabled, getGroupBy, getTrackBy } = useSelectableList(props);
    const optionGroups = computed(() => props.options.reduce((groups, option) => {
      const groupBy = getGroupBy(option);
      if (!groupBy) {
        groups._noGroup.push(option);
      } else {
        if (!groups[groupBy]) {
          groups[groupBy] = [];
        }
        groups[groupBy].push(option);
      }
      return groups;
    }, { _noGroup: [] }));
    const getUnSlottedVNodes = (nodes) => {
      if (Array.isArray(nodes) && nodes[0].type === Fragment) {
        return nodes[0].children;
      }
      return nodes;
    };
    const getVNodeComponentName = (node) => {
      if (typeof node.type === "object" && "name" in node.type && typeof node.type.name === "string") {
        return node.type.name;
      }
      return "";
    };
    const getVNodeKey = (node) => {
      if (typeof node.type === "string") {
        return node.type;
      }
      if (typeof node.type === "object" && "name" in node.type && typeof node.type.name === "string") {
        return node.type.name;
      }
      return String(node.key);
    };
    return {
      container,
      optionGroups,
      makeMenuContainerAttributes,
      getVNodeComponentName,
      getUnSlottedVNodes,
      getVNodeKey,
      getText,
      getValue,
      getDisabled,
      getTrackBy
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaMenuList.vue_vue_type_script_lang.mjs.map
