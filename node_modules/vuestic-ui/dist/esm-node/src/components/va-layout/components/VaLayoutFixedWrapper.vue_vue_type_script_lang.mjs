import { defineComponent, ref, computed } from "vue";
import { V as VaResizeObserver } from "./VaResizeObserver.mjs";
import { b as useFixedLayoutChild } from "../hooks/useLayout.mjs";
const _sfc_main = defineComponent({
  name: "VaLayoutFixedWrapper",
  components: { VaResizeObserver },
  props: {
    area: { type: String, required: true }
  },
  setup(props) {
    const size = ref(null);
    const direction = computed(() => {
      if (props.area === "top" || props.area === "bottom") {
        return "vertical";
      } else {
        return "horizontal";
      }
    });
    const getPxOrZero = (value) => {
      if (!value) {
        return "0px";
      }
      return value + "px";
    };
    const styles = computed(() => {
      if (direction.value === "vertical") {
        return { width: `calc(100% - ${getPxOrZero(paddings.value.left)} - ${getPxOrZero(paddings.value.right)})`, [props.area]: 0 };
      } else {
        return { height: `calc(100% - ${getPxOrZero(paddings.value.top)} - ${getPxOrZero(paddings.value.bottom)})`, [props.area]: 0 };
      }
    });
    const { paddings } = useFixedLayoutChild(props.area, size);
    const computedStyle = computed(() => {
      return Object.keys(paddings.value).reduce((acc, key) => {
        if (key === props.area) {
          return acc;
        }
        return {
          ...acc,
          [key]: `${paddings.value[key]}px`
        };
      }, {});
    });
    return {
      direction,
      computedStyle,
      paddings,
      size,
      styles
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaLayoutFixedWrapper.vue_vue_type_script_lang.mjs.map
