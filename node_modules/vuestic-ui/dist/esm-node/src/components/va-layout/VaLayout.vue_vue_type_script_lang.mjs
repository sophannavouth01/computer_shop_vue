import { defineComponent, computed, watchEffect } from "vue";
import { u as useGridTemplateArea } from "./hooks/useGridTemplateArea.mjs";
import { u as useLayoutProps, a as useLayout } from "./hooks/useLayout.mjs";
import { V as VaLayoutArea } from "./components/VaLayoutArea.mjs";
import { u as useDocument } from "../../composables/useDocument.mjs";
const areaNames = [
  "top",
  "left",
  "right",
  "bottom"
];
const _sfc_main = defineComponent({
  name: "VaLayout",
  props: {
    ...useLayoutProps,
    allowBodyScrollOnOverlay: { type: Boolean, default: false }
  },
  emits: [
    "top-overlay-click",
    "left-overlay-click",
    "right-overlay-click",
    "bottom-overlay-click"
  ],
  components: { VaLayoutArea },
  setup(props, { slots }) {
    const { paddings } = useLayout(props);
    const doDisableScroll = computed(() => {
      return !props.allowBodyScrollOnOverlay && areaNames.some((area) => {
        var _a;
        return (_a = props[area]) == null ? void 0 : _a.overlay;
      });
    });
    const document = useDocument();
    watchEffect(() => {
      var _a;
      const overflowParent = (_a = document.value) == null ? void 0 : _a.body;
      if (!overflowParent) {
        return;
      }
      if (doDisableScroll.value) {
        overflowParent.style.overflow = "hidden";
      } else {
        overflowParent.style.overflow = "";
      }
    });
    return {
      areaNames,
      templateArea: useGridTemplateArea(props),
      verticalTemplate: computed(() => {
        return [
          slots.top ? "min-content" : "0fr",
          "1fr",
          slots.bottom ? "min-content" : "0fr"
        ].filter(Boolean).join(" ");
      }),
      horizontalTemplate: computed(() => {
        return [
          slots.left ? "min-content" : "0fr",
          "1fr",
          slots.right ? "min-content" : "0fr"
        ].filter(Boolean).join(" ");
      }),
      paddings
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaLayout.vue_vue_type_script_lang.mjs.map
