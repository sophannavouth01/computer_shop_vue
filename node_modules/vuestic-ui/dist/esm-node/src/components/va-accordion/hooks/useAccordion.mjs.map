{"version":3,"file":"useAccordion.mjs","sources":["../../../../../../src/components/va-accordion/hooks/useAccordion.ts"],"sourcesContent":["import { computed, inject, onBeforeUnmount, onMounted, provide, Ref, ref, watch, WritableComputedRef } from 'vue'\n\nexport const AccordionServiceKey = Symbol('AccordionService')\n\nexport interface AccordionItemProps {\n  inset?: boolean,\n  popout?: boolean\n}\n\nexport interface AccordionProps extends AccordionItemProps {\n  modelValue: boolean[],\n  multiple: boolean,\n}\n\nexport type AccordionItem = {}\n\nexport interface AccordionInject {\n  onItemMounted: (item: AccordionItem) => void,\n  onItemUnmounted: (item: AccordionItem) => void,\n  getItemValue: (item: AccordionItem) => boolean,\n  setItemValue: (item: AccordionItem, value: boolean) => void,\n  props: Ref<AccordionItemProps>,\n}\n\n/**\n * @param props\n * @param state array of states of all accordion items */\nexport const useAccordion = (props: AccordionProps, state: WritableComputedRef<boolean[]>) => {\n  /** @notice items are reactive because they have reactive `state` inside */\n  const items = ref<AccordionItem[]>([])\n\n  const onItemMounted = (item: AccordionItem) => { items.value.push(item) }\n  const onItemUnmounted = (item: AccordionItem) => { items.value = items.value.filter((i) => i !== item) }\n\n  const getItemValue = (item: AccordionItem) => {\n    return state.value[items.value.indexOf(item)] ?? false\n  }\n\n  const setItemValue = (item: AccordionItem, value: boolean) => {\n    const index = items.value.indexOf(item)\n    if (index === -1) { return }\n\n    if (!props.multiple) {\n      state.value = state.value.map((el, i) => {\n        if (i === index) { return value }\n        return false\n      })\n    } else {\n      state.value[index] = value\n    }\n  }\n\n  watch(items, (newItems) => {\n    state.value = newItems.map((item) => getItemValue(item))\n  }, { deep: true })\n\n  provide(AccordionServiceKey, {\n    isInsideAccordion: true,\n    onItemMounted,\n    onItemUnmounted,\n    getItemValue,\n    setItemValue,\n    props: computed(() => props),\n  })\n\n  return { items }\n}\n\n/**\n * Hook used in items that should react on VaAccordion changes\n * @param state shows if accordion item is open\n */\nexport const useAccordionItem = () => {\n  const accordion = inject<AccordionInject | undefined>(AccordionServiceKey, undefined)\n\n  if (!accordion) {\n    return { accordionProps: ref({} as AccordionProps) }\n  }\n\n  const item = {}\n\n  onMounted(() => accordion.onItemMounted(item))\n  onBeforeUnmount(() => accordion.onItemUnmounted(item))\n\n  const valueProxy = computed({\n    get: () => accordion.getItemValue(item),\n    set: (value) => accordion.setItemValue(item, value),\n  })\n\n  return {\n    valueProxy,\n    accordionProps: accordion.props,\n  }\n}\n"],"names":[],"mappings":";AAEa,MAAA,sBAAsB,OAAO,kBAAkB;AAyB/C,MAAA,eAAe,CAAC,OAAuB,UAA0C;AAEtF,QAAA,QAAQ,IAAqB,CAAA,CAAE;AAE/B,QAAA,gBAAgB,CAAC,SAAwB;AAAQ,UAAA,MAAM,KAAK,IAAI;AAAA,EAAA;AAChE,QAAA,kBAAkB,CAAC,SAAwB;AAAE,UAAM,QAAQ,MAAM,MAAM,OAAO,CAAC,MAAM,MAAM,IAAI;AAAA,EAAA;AAE/F,QAAA,eAAe,CAAC,SAAwB;AAC5C,WAAO,MAAM,MAAM,MAAM,MAAM,QAAQ,IAAI,CAAC,KAAK;AAAA,EAAA;AAG7C,QAAA,eAAe,CAAC,MAAqB,UAAmB;AAC5D,UAAM,QAAQ,MAAM,MAAM,QAAQ,IAAI;AACtC,QAAI,UAAU,IAAI;AAAE;AAAA,IAAO;AAEvB,QAAA,CAAC,MAAM,UAAU;AACnB,YAAM,QAAQ,MAAM,MAAM,IAAI,CAAC,IAAI,MAAM;AACvC,YAAI,MAAM,OAAO;AAAS,iBAAA;AAAA,QAAM;AACzB,eAAA;AAAA,MAAA,CACR;AAAA,IAAA,OACI;AACC,YAAA,MAAM,KAAK,IAAI;AAAA,IACvB;AAAA,EAAA;AAGI,QAAA,OAAO,CAAC,aAAa;AACzB,UAAM,QAAQ,SAAS,IAAI,CAAC,SAAS,aAAa,IAAI,CAAC;AAAA,EAAA,GACtD,EAAE,MAAM,KAAA,CAAM;AAEjB,UAAQ,qBAAqB;AAAA,IAC3B,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO,SAAS,MAAM,KAAK;AAAA,EAAA,CAC5B;AAED,SAAO,EAAE,MAAM;AACjB;AAMO,MAAM,mBAAmB,MAAM;AAC9B,QAAA,YAAY,OAAoC,qBAAqB,MAAS;AAEpF,MAAI,CAAC,WAAW;AACd,WAAO,EAAE,gBAAgB,IAAI,CAAA,CAAoB,EAAE;AAAA,EACrD;AAEA,QAAM,OAAO,CAAA;AAEb,YAAU,MAAM,UAAU,cAAc,IAAI,CAAC;AAC7C,kBAAgB,MAAM,UAAU,gBAAgB,IAAI,CAAC;AAErD,QAAM,aAAa,SAAS;AAAA,IAC1B,KAAK,MAAM,UAAU,aAAa,IAAI;AAAA,IACtC,KAAK,CAAC,UAAU,UAAU,aAAa,MAAM,KAAK;AAAA,EAAA,CACnD;AAEM,SAAA;AAAA,IACL;AAAA,IACA,gBAAgB,UAAU;AAAA,EAAA;AAE9B;"}