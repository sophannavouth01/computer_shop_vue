import { defineComponent, computed } from "vue";
import { u as useRatingProps, a as useRating } from "./hooks/useRating.mjs";
import { u as useVaRatingColorsProps, a as useVaRatingColors } from "./hooks/useVaRatingColors.mjs";
import { R as RatingValue } from "./types.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { _ as _VaRatingItem } from "./components/VaRatingItem/VaRatingItem.mjs";
import { V as VaRatingItemNumberButton } from "./components/VaRatingItemNumberButton.mjs";
import { u as useFormFieldProps, a as useFormField } from "../../composables/useFormField.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.mjs";
import { u as useTranslation } from "../../composables/useTranslation.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.mjs";
const VaRatingItemPropsDeclarations = extractComponentProps(_VaRatingItem, ["modelValue", "itemNumber"]);
const VaRatingItemNumberButtonPropsDeclarations = extractComponentProps(VaRatingItemNumberButton, ["modelValue", "itemNumber"]);
const _sfc_main = defineComponent({
  name: "VaRating",
  props: {
    ...VaRatingItemNumberButtonPropsDeclarations,
    ...useRatingProps,
    ...useVaRatingColorsProps,
    ...useFormFieldProps,
    ...VaRatingItemPropsDeclarations,
    ...useComponentPresetProp,
    modelValue: { type: Number, default: 0 },
    numbers: { type: Boolean, default: false },
    halves: { type: Boolean, default: false },
    max: { type: Number, default: 5 },
    texts: { type: Array, default: () => [] },
    ariaLabel: { type: String, default: "$t:currentRating" },
    ariaItemLabel: { type: String, default: "$t:voteRating" }
  },
  emits: ["update:modelValue"],
  components: { VaRatingItem: _VaRatingItem, VaRatingItemNumberButton },
  setup(props) {
    const { computedClasses: rootClass } = useFormField("va-rating", props);
    const {
      visibleValue,
      modelValue: vModel,
      hoveredValue,
      isHovered,
      onMouseEnter,
      onMouseLeave,
      onItemValueUpdate,
      onItemHoveredValueUpdate,
      getItemValue
    } = useRating(props);
    const isInteractionsEnabled = computed(() => !props.disabled && !props.readonly);
    const onArrowKeyPress = (direction) => {
      const step = props.halves ? RatingValue.HALF : RatingValue.FULL;
      const nextStep = visibleValue.value + step * direction;
      const min = props.clearable ? 0 : step;
      if (nextStep >= min && nextStep <= props.max) {
        onItemValueUpdate(visibleValue.value, step * direction);
      } else if (nextStep < min) {
        onItemValueUpdate(min, 0);
      } else {
        onItemValueUpdate(props.max, direction === -1 ? step * direction : 0);
      }
    };
    const { tp, t } = useTranslation();
    const {
      computedColor,
      backgroundComputed,
      textColorComputed
    } = useVaRatingColors(props);
    const tabIndexComputed = computed(() => isInteractionsEnabled.value ? 0 : void 0);
    const VaRatingItemProps = filterComponentProps(VaRatingItemPropsDeclarations);
    const VaRatingItemNumberButtonProps = filterComponentProps(VaRatingItemNumberButtonPropsDeclarations);
    return {
      tp,
      t,
      visibleValue,
      vModel,
      hoveredValue,
      isHovered,
      onMouseEnter,
      onMouseLeave,
      onItemValueUpdate,
      onItemHoveredValueUpdate,
      getItemValue,
      onArrowKeyPress,
      computedColor,
      backgroundComputed,
      textColorComputed,
      rootClass,
      VaRatingItemProps,
      VaRatingItemNumberButtonProps,
      isInteractionsEnabled,
      tabIndexComputed
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaRating.vue_vue_type_script_lang.mjs.map
