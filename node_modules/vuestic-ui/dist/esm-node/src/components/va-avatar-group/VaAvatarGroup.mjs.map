{"version":3,"file":"VaAvatarGroup.mjs","sources":["../../../../../src/components/va-avatar-group/VaAvatarGroup.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-avatar-group\"\n    :class=\"classComputed\"\n    role=\"group\"\n  >\n    <va-avatar\n      v-for=\"(option, idx) in maxOptions\"\n      :key=\"idx\"\n      v-bind=\"{ ...avatarProps, ...option }\"\n      role=\"listitem\"\n    />\n    <slot v-if=\"restOptionsCount > 0\" name=\"rest\" v-bind=\"avatarProps\">\n      <va-avatar\n        v-bind=\"avatarProps\"\n        :color=\"restColor\"\n        class=\"va-avatar-group__rest\"\n        role=\"listitem\"\n      >\n        +{{ restOptionsCount }}\n      </va-avatar>\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType } from 'vue'\n\nimport { VaAvatar } from '../va-avatar'\n\nimport pick from 'lodash/pick.js'\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport { useBem, useComponentPresetProp, useSize, useSizeProps } from '../../composables'\n\nconst VaAvatarProps = extractComponentProps(VaAvatar)\n\nexport default defineComponent({\n  name: 'VaAvatarGroup',\n\n  components: {\n    VaAvatar,\n  },\n\n  props: {\n    ...useSizeProps,\n    ...useComponentPresetProp,\n    ...VaAvatarProps,\n\n    max: {\n      type: Number,\n      default: 0,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n    options: {\n      type: Array as PropType<Record<string, unknown>[]>,\n      default: () => [],\n    },\n    /** If there are more avatars that can be displayed we show rest number. This prop changes color of rest indicator. */\n    restColor: {\n      type: String,\n      default: 'secondary',\n    },\n  },\n\n  setup (props) {\n    const classComputed = useBem('va-avatar-group', () => ({\n      ...pick(props, ['vertical']),\n    }))\n\n    const maxOptions = computed(() => props.max && props.max <= props.options.length ? props.options.slice(0, props.max) : props.options)\n    const visibleItemsCount = computed(() => props.max ? props.max + 1 : 1)\n    const restOptionsCount = computed(() => {\n      const hasOptions = props.options.length > 0\n      const canAddMoreOptions = maxOptions.value.length < props.options.length\n      const remainingOptions = props.options.length - (props.max || 0)\n\n      return hasOptions && canAddMoreOptions ? remainingOptions : 0\n    })\n    const { sizeComputed, fontSizeComputed } = useSize(props, 'VaAvatarGroup')\n\n    const filteredAvatarProps = filterComponentProps(VaAvatarProps)\n    const avatarProps = computed(() => ({\n      ...filteredAvatarProps.value,\n      fontSize: fontSizeComputed.value,\n      size: sizeComputed.value,\n    }))\n\n    return {\n      classComputed,\n      maxOptions,\n      visibleItemsCount,\n      restOptionsCount,\n      avatarProps,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-avatar-group {\n  display: flex;\n  flex-wrap: nowrap;\n\n  .va-avatar + .va-avatar {\n    margin-left: var(--va-avatar-group-gap);\n  }\n\n  &--vertical {\n    flex-direction: column;\n\n    .va-avatar + .va-avatar {\n      margin-left: 0;\n      margin-top: var(--va-avatar-group-gap);\n    }\n  }\n}\n</style>\n"],"names":["_resolveComponent","_openBlock","_createElementBlock","_normalizeClass","_createBlock","_mergeProps","_normalizeProps","_createVNode"],"mappings":";;;;;+BACEA,iBAqBM,WAAA;SAlBCC,UAAO,GAAAC,mBAAA,OAAA;AAAA,IAAA,OAAAC,eAAA,CAAA,mBAAA,KAAA,aAAA,CAAA;AAAA;;;AAQgB,aAAAF,UAAA,GAAAG,YAAA,sBAAAC,WAAA,EAAA,KAAA,IAAA,GAAA,EAAA,GAAA,KAAA,aAAA,GAAA,OAAA,GAAA,EAAA,MAAA,YAAA,GAAA,MAAA,EAAA;AAAA,IAA5B,CAAA,GAAA,GAAA;AAAA,IACE,KAAA,mBAOY,eALF,KAAS,QAAA,QAAAC,eAAAD,WAAA,EAAA,KAAA,EAAA,GAAA,KAAA,WAAA,CAAA,GAAA,MAAA;AAAA,MAAAE,YACX,sBAAuBF,WAAA,KAAA,aAAA;AAAA,QAC7B,OAAK,KAAA;AAAA,QAAA,OAAA;AAAA;;;;;;;;;;;"}