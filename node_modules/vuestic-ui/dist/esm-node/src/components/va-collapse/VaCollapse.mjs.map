{"version":3,"file":"VaCollapse.mjs","sources":["../../../../../src/components/va-collapse/VaCollapse.vue"],"sourcesContent":["<template>\n  <div class=\"va-collapse\" :class=\"computedClasses\">\n    <div\n      class=\"va-collapse__header-wrapper\"\n      role=\"heading\"\n      @click=\"toggle\"\n      @keydown.enter=\"toggle\"\n      @keydown.space=\"toggle\"\n    >\n      <slot\n        name=\"header\"\n        v-bind=\"{\n          value: computedModelValue,\n          bind: headerAttributes,\n          attributes: headerAttributes,\n          attrs: headerAttributes,\n          iconAttrs: {\n            class: [\n              'va-collapse__expand-icon',\n              computedModelValue ? 'a-collapse__expand-icon--expanded' : 'a-collapse__expand-icon--collapsed'\n            ]\n          },\n          text: header,\n        }\"\n      >\n        <div\n          v-bind=\"headerAttributes\"\n          class=\"va-collapse__header\"\n          :style=\"headerStyle\"\n        >\n          <va-icon\n            v-if=\"icon\"\n            class=\"va-collapse__header__icon\"\n            :name=\"icon\"\n          />\n          <slot\n            name=\"header-content\"\n            v-bind=\"{ header }\"\n          >\n            <div class=\"va-collapse__header__text\">\n              {{ header }}\n            </div>\n          </slot>\n          <slot name=\"expand-icon\">\n            <va-icon\n              class=\"va-collapse__expand-icon\"\n              name=\"va-arrow-down\"\n              :class=\"computedModelValue ? 'va-collapse__expand-icon--expanded' : 'va-collapse__expand-icon--collapsed'\"\n            />\n          </slot>\n        </div>\n      </slot>\n    </div>\n    <div\n      class=\"va-collapse__body-wrapper\"\n      :class=\"{\n        'va-collapse__body-wrapper--bordered': !$slots.body && !$slots.header,\n      }\"\n      :style=\"contentStyle\"\n      @transitionend=\"onTransitionEnd\"\n    >\n      <div\n        class=\"va-collapse__body\"\n        ref=\"body\"\n        role=\"region\"\n        :id=\"panelIdComputed\"\n        :aria-labelledby=\"headerIdComputed\"\n      >\n        <slot name=\"body\">\n          <div class=\"va-collapse__content\">\n            <slot name=\"default\">\n              <slot name=\"content\" />\n            </slot>\n          </div>\n        </slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref, shallowRef, watch } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport {\n  useColors, useTextColor,\n  useBem,\n  useResizeObserver,\n  useComponentPresetProp,\n  isColorTransparent,\n  useStateful,\n  useStatefulProps,\n  useSelectableEmits,\n} from '../../composables'\nimport { useAccordionItem } from '../va-accordion/hooks/useAccordion'\n\nimport { generateUniqueId } from '../../utils/uuid'\n\nimport { VaIcon } from '../va-icon'\n\nexport default defineComponent({\n  name: 'VaCollapse',\n  components: {\n    VaIcon,\n  },\n  props: {\n    ...useComponentPresetProp,\n    ...useStatefulProps,\n    modelValue: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    header: { type: String, default: '' },\n    icon: { type: String, default: '' },\n    color: { type: String, default: undefined },\n    bodyColor: { type: String, default: undefined },\n    textColor: { type: String, default: '' },\n    bodyTextColor: { type: String, default: '' },\n    iconColor: { type: String, default: 'secondary' },\n    colorAll: { type: Boolean, default: false },\n    stateful: { type: Boolean, default: true },\n  },\n  emits: ['update:modelValue', ...useSelectableEmits],\n\n  setup (props, { emit }) {\n    const body = shallowRef<HTMLElement>()\n\n    const { valueComputed } = useStateful(props, emit, 'modelValue')\n\n    const { getColor, getTextColor, setHSLAColor } = useColors()\n    const { accordionProps, valueProxy: computedModelValue = valueComputed } = useAccordionItem()\n\n    const bodyHeight = ref()\n    useResizeObserver([body], () => {\n      bodyHeight.value = body.value?.clientHeight ?? 0\n    })\n\n    const height = computed(() => computedModelValue.value ? bodyHeight.value : 0)\n\n    const getTransition = () => {\n      const duration = height.value / 1000 * 0.2\n      return `${duration > 0.2 ? duration : 0.2}s`\n    }\n\n    const contentBackground = computed(() => {\n      if (props.bodyColor) {\n        return getColor(props.bodyColor)\n      }\n\n      return props.color && props.colorAll\n        ? setHSLAColor(getColor(props.color), { a: 0.07 })\n        : undefined\n    })\n\n    const headerBackground = computed(() => {\n      return props.color ? getColor(props.color) : undefined\n    })\n\n    const uniqueId = computed(generateUniqueId)\n    const headerIdComputed = computed(() => `header-${uniqueId.value}`)\n    const panelIdComputed = computed(() => `panel-${uniqueId.value}`)\n    const tabIndexComputed = computed(() => props.disabled ? -1 : 0)\n\n    const headerAttributes = computed(() => ({\n      id: headerIdComputed.value,\n      tabindex: tabIndexComputed.value,\n      'aria-controls': panelIdComputed.value,\n      'aria-expanded': computedModelValue.value,\n      'aria-disabled': props.disabled,\n      role: 'button',\n    }))\n\n    const isHeightChanging = ref(false)\n\n    watch(height, (newValue, oldValue) => {\n      // If no transition happened, just got initial height value\n      if (oldValue === undefined) { return }\n      isHeightChanging.value = true\n    })\n\n    const onTransitionEnd = (e: TransitionEvent) => {\n      if (e.propertyName === 'height' && e.target === e.currentTarget) {\n        isHeightChanging.value = false\n      }\n    }\n\n    const computedClasses = useBem('va-collapse', () => ({\n      ...pick(props, ['disabled']),\n      expanded: computedModelValue.value,\n      active: computedModelValue.value,\n      popout: !!(accordionProps.value.popout && computedModelValue.value),\n      inset: !!(accordionProps.value.inset && computedModelValue.value),\n      'height-changing': isHeightChanging.value,\n      'colored-body': Boolean(contentBackground.value),\n      'colored-header': Boolean(headerBackground.value),\n    }))\n\n    const toggle = () => {\n      if (props.disabled) { return }\n      computedModelValue.value = !computedModelValue.value\n    }\n\n    const { textColorComputed } = useTextColor(headerBackground)\n\n    const headerStyle = computed(() => ({\n      color: textColorComputed.value,\n      backgroundColor: headerBackground.value,\n    }))\n\n    const contentStyle = computed(() => {\n      return {\n        visibility: bodyHeight.value > 0 ? 'visible' as const : 'hidden' as const,\n        height: `${height.value}px`,\n        transitionDuration: getTransition(),\n        background: computedModelValue.value ? contentBackground.value : '',\n        color: props.bodyTextColor\n          ? getColor(props.bodyTextColor)\n          : contentBackground.value\n            ? getColor(getTextColor(contentBackground.value))\n            : 'currentColor',\n      }\n    })\n\n    return {\n      onTransitionEnd,\n      body,\n      height,\n\n      toggle,\n      computedModelValue,\n\n      headerIdComputed,\n      headerAttributes,\n      panelIdComputed,\n      tabIndexComputed,\n\n      computedClasses,\n\n      headerStyle,\n\n      contentStyle,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-collapse {\n  transition: var(--va-collapse-transition, var(--va-swing-transition));\n  font-family: var(--va-font-family);\n  display: flex;\n  flex-direction: column;\n\n  &__body-wrapper {\n    transition: var(--va-collapse-body-wrapper-transition);\n    overflow: auto;\n\n    &--bordered {\n      border-bottom: 1px solid var(--va-background-border);\n      box-sizing: content-box;\n\n      .va-collapse--colored-header:not(.va-collapse--expanded) & {\n        border-bottom: none;\n      }\n\n      .va-collapse--colored-body.va-collapse--expanded & {\n        border-bottom: none;\n      }\n    }\n  }\n\n  &__body {\n    top: 0;\n    left: 0;\n    width: var(--va-collapse-body-width);\n    transition: var(--va-collapse-body-transition);\n    opacity: 0;\n  }\n\n  &__content {\n    padding: var(--va-collapse-padding);\n    padding-top: calc(var(--va-collapse-padding) / 1.5);\n    box-sizing: border-box;\n\n    &:empty {\n      padding: 0;\n    }\n  }\n\n  &__header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: var(--va-collapse-gap);\n    cursor: var(--va-collapse-header-content-cursor);\n    padding: var(--va-collapse-padding);\n    transition: all 0.2s ease-in-out;\n\n    &__text {\n      width: 100%;\n      font-weight: var(--va-collapse-header-content-text-font-weight);\n    }\n\n    @include keyboard-focus-outline(var(--va-collapse-header-content-border-radius));\n  }\n\n  &--expanded {\n    .va-collapse {\n      &__body {\n        opacity: 1;\n      }\n    }\n  }\n\n  &__expand-icon {\n    transition: var(--va-collapse-expand-icon-transition);\n\n    &--expanded {\n      transform: rotate(180deg);\n    }\n  }\n\n  &--popout {\n    margin: var(--va-collapse-popout-margin);\n  }\n\n  &--inset {\n    margin: var(--va-collapse-inset-margin);\n  }\n\n  &--disabled {\n    @include va-disabled();\n  }\n\n  &--height-changing {\n    .va-collapse {\n      &__body-wrapper {\n        overflow: hidden;\n      }\n    }\n  }\n}\n</style>\n"],"names":["_resolveComponent","_normalizeClass","_createElementVNode","_normalizeProps","_guardReactiveProps","_mergeProps","_createBlock","_createCommentVNode","_renderSlot","_toDisplayString","_createVNode","_normalizeStyle"],"mappings":";;;;AAqEe,MAAA,aAAA,EAAA,OAAM;;;;6BApEnBA,iBA4EM,SAAA;;IA3EJ,OAkDMC,eAAA,CAAA,eAAA,KAAA,eAAA,CAAA;AAAA,EAAA,GAAA;AAAA,IAhDUC,mBAAA,OAAA;AAAA,MACb,OAAK;AAAA,MACL,MAAA;AAAA,MAAe,SAAA,OAAA,CAAA,MAAA,OAAA,CAAA,IAAA,IAAA,SAAA,KAAA,UAAA,KAAA,OAAA,GAAA,IAAA;AAAA,MAAA,WAAA;AAAA;;MAGhB;AAAA,IAAA,GAAA;AAAA,iBAEiE,KAAgB,QAAA,UAAAC,eAAAC,mBAAA;AAAA,QAAwB,OAAA,KAAA;AAAA,QAAmC,MAAA,KAAA;AAAA,QAAA,YAAA,KAAA;AAAA;;UAAsH,OAAA;AAAA,YAAA;AAAA;;;QAchQ,MAAA,KAAA;AAAA,MAAA,CAAA,CAEE,GAAM,MAAA;AAAA,QAAAF,mBACE,OAAWG,WAAA,KAAA,kBAAA;AAAA,UAAA,OAAA;AAAA,iBAGX,KAAI;AAAA,QAAA,CAAA,GAAA;AAAA,oCACuBC,YAAA,oBAAA;AAAA,YAChC,KAAI;AAAA,YAAA,OAAA;AAAA;aASA,MAAA,GAAA,CAAA,MAAA,CAAA,KAHLC,mBAEM,IAFN,IAAA;AAAA,UAAAC,WAAA,KAAA,QAAA,kBAAAL,eAAAC,mBAAA,EAAA,QAAA,KAAA,OAAA,CAAA,CAAA,GAAA,MAAA;AAAA,YAIFF,mBAMO,OAAA,YAAAO,gBAAA,KAAA,MAAA,GAAA,CAAA;AAAA,UAAA,CAAA;AAAA,qBAJE,KAAC,QAAA,eAAA,CAAA,GAAA,MAAA;AAAA,YAAAC,YACD,oBAAe;AAAA,cAAA,OAAAT,eAAA,CAAA,4BAAA,KAAA,qBAAA,uCAAA,qCAAA,CAAA;AAAA;;;;MAO9B,CAAA;AAAA,IACE,GAAA,EAAA;AAAA,IAAAC,mBAAA,OAAA;AAAA;QAIC,uCAAmB,CAAA,KAAA,OAAA,QAAA,CAAA,KAAA,OAAA;AAAA,MAAA,CACnB,CAAA;AAAA,MAAA,OAAAS,eAAA,KAAA,YAAA;AAAA,MAED,iBAcM,OAAA,CAAA,MAAA,OAAA,CAAA,IAAA,IAAA,SAAA,KAAA,mBAAA,KAAA,gBAAA,GAAA,IAAA;AAAA,IAAA,GAAA;AAAA,MAZMT,mBAAA,OAAA;AAAA,QACV,OAAK;AAAA,QACJ,KAAI;AAAA,QACJ,MAAA;AAAA,QAAA,IAAA,KAAA;AAAA,QAED,mBAMO,KAAA;AAAA,MAAA,GAAA;AAAA,mBAJH,KAEO,QAAA,QAAA,CAAA,GAAA,MAAA;AAAA,UADkBA,mBAAA,OAAA,YAAA;AAAA,YAAAM,WAAA,KAAA,QAAA,WAAA,CAAA,GAAA,MAAA;AAAA;;;;;;;;;"}