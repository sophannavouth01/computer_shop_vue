import { ref, computed, watch, toRef, nextTick } from "vue";
import { h as flatten, f as isString, g as isFunction } from "../../vendor.mjs";
import { u as useSyncProp } from "./useSyncProp.mjs";
import { u as useFocus } from "./useFocus.mjs";
import { w as watchSetter } from "../utils/watch-setter.mjs";
import { u as useFormChild } from "./useForm/useFormChild.mjs";
const normalizeValidationRules = (rules = [], callArguments = null) => {
  if (isString(rules)) {
    rules = [rules];
  }
  return rules.map((rule) => isFunction(rule) ? rule(callArguments) : rule);
};
const useValidationProps = {
  name: { type: String, default: void 0 },
  modelValue: { required: false },
  dirty: { type: Boolean, default: false },
  error: { type: Boolean, default: void 0 },
  errorMessages: { type: [Array, String], default: void 0 },
  errorCount: { type: [String, Number], default: 1 },
  rules: { type: Array, default: () => [] },
  success: { type: Boolean, default: false },
  messages: { type: [Array, String], default: () => [] },
  immediateValidation: { type: Boolean, default: false }
};
const useValidationEmits = ["update:error", "update:errorMessages", "update:dirty"];
const isPromise = (value) => {
  return typeof value === "object" && typeof value.then === "function";
};
const useDirtyValue = (value, props, emit) => {
  const isDirty = ref(false);
  watchSetter(value, () => {
    isDirty.value = true;
    emit("update:dirty", true);
  });
  watch(() => props.dirty, (newValue) => {
    if (isDirty.value === newValue) {
      return;
    }
    isDirty.value = newValue;
  });
  return { isDirty };
};
const useValidation = (props, emit, options) => {
  const { reset, focus } = options;
  const { isFocused, onFocus, onBlur } = useFocus();
  const [computedError] = useSyncProp("error", props, emit, false);
  const [computedErrorMessages] = useSyncProp("errorMessages", props, emit, []);
  const isLoading = ref(false);
  const validationAriaAttributes = computed(() => ({
    "aria-invalid": computedError.value,
    "aria-errormessage": typeof computedErrorMessages.value === "string" ? computedErrorMessages.value : computedErrorMessages.value.join(", ")
  }));
  const resetValidation = () => {
    computedError.value = false;
    computedErrorMessages.value = [];
    isDirty.value = false;
  };
  const processResults = (results) => {
    let error = false;
    let errorMessages = [];
    results.forEach((result) => {
      if (isString(result)) {
        errorMessages = [...errorMessages, result];
        error = true;
      } else if (result === false) {
        error = true;
      }
    });
    computedErrorMessages.value = errorMessages;
    computedError.value = error;
    return !error;
  };
  const validateAsync = async () => {
    if (!props.rules || !props.rules.length) {
      return true;
    }
    const results = normalizeValidationRules(flatten(props.rules), options.value.value);
    const asyncPromiseResults = results.filter((result) => isPromise(result));
    const syncRules = results.filter((result) => !isPromise(result));
    if (!asyncPromiseResults.length) {
      return processResults(syncRules);
    }
    isLoading.value = true;
    return Promise.all(asyncPromiseResults).then((asyncResults) => {
      isLoading.value = false;
      return processResults([...syncRules, ...asyncResults]);
    });
  };
  const validate = () => {
    if (!props.rules || !props.rules.length) {
      return true;
    }
    const rules = flatten(props.rules);
    const results = normalizeValidationRules(rules, options.value.value);
    const asyncPromiseResults = results.filter((result) => isPromise(result));
    const syncRules = results.filter((result) => !isPromise(result));
    const isSyncedError = syncRules.some((result) => isString(result) ? result : result === false);
    if (asyncPromiseResults.length && !isSyncedError) {
      isLoading.value = true;
      Promise.all(asyncPromiseResults).then((asyncResults) => {
        processResults([...syncRules, ...asyncResults]);
        isLoading.value = false;
      });
      return isSyncedError;
    }
    return processResults(syncRules);
  };
  watch(isFocused, (newVal) => !newVal && validate());
  const immediateValidation = computed(() => props.immediateValidation || isFormImmediate.value);
  let canValidate = true;
  const withoutValidation = (cb) => {
    if (immediateValidation.value) {
      return cb();
    }
    canValidate = false;
    cb();
    nextTick(() => {
      canValidate = true;
    });
  };
  watch(options.value, () => {
    if (!canValidate) {
      return;
    }
    return validate();
  }, { immediate: true });
  const { isDirty } = useDirtyValue(options.value, props, emit);
  const {
    doShowErrorMessages,
    // Renamed to forceHideError because it's not clear what it does
    doShowError,
    doShowLoading,
    isFormImmediate,
    isFormDirty
  } = useFormChild({
    isDirty,
    isValid: computed(() => !computedError.value),
    isLoading,
    errorMessages: computedErrorMessages,
    validate,
    validateAsync,
    resetValidation,
    focus,
    reset: () => {
      reset();
      resetValidation();
      isDirty.value = false;
    },
    value: computed(() => options.value || props.modelValue),
    name: toRef(props, "name")
  });
  return {
    isDirty,
    computedError: computed(() => {
      if (!isFormDirty.value) {
        if (!immediateValidation.value && !isDirty.value) {
          return false;
        }
      }
      return doShowError.value ? computedError.value : false;
    }),
    computedErrorMessages: computed(() => doShowErrorMessages.value ? computedErrorMessages.value : []),
    isLoading: computed(() => doShowLoading.value ? isLoading.value : false),
    listeners: { onFocus, onBlur },
    validate,
    resetValidation,
    withoutValidation,
    validationAriaAttributes
  };
};
export {
  useValidation as a,
  useValidationProps as b,
  useValidationEmits as u
};
//# sourceMappingURL=useValidation.mjs.map
