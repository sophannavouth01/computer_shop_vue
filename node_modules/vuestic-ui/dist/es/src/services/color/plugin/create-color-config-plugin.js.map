{"version":3,"file":"create-color-config-plugin.js","sources":["../../../../../../src/services/color/plugin/create-color-config-plugin.ts"],"sourcesContent":["import { PartialGlobalConfig } from './../../global-config/types'\nimport { ColorVariables } from './../types'\nimport { App, watch, computed } from 'vue'\nimport { isServer } from '../../../utils/ssr'\nimport { cssVariableName } from '../utils'\nimport { useColors } from '../../../composables'\nimport { generateUniqueId } from '../../../utils/uuid'\nimport { addOrUpdateStyleElement } from '../../../utils/dom'\n\nexport const setCSSVariable = (name: string, value: string, root: HTMLElement) => {\n  root.style.setProperty(cssVariableName(name), value)\n}\n\nexport const generateCSSVariable = (key: string, value: string) => {\n  return `${cssVariableName(key)}: ${value};\\n`\n}\n\nexport const createColorConfigPlugin = (app: App, config?: PartialGlobalConfig) => {\n  const { colors: configColors, getTextColor, getColor, currentPresetName, applyPreset } = useColors()\n\n  /** Renders CSS variables string. Use this in SSR mode */\n  const renderCSSVariables = (colors: ColorVariables | undefined = configColors) => {\n    if (!colors) { return }\n\n    const colorNames = Object.keys(colors)\n    const renderedColors = colorNames.map((key) => `${cssVariableName(key)}: ${colors[key]}`).join(';')\n    const renderedOnColors = colorNames.map((key) => `${cssVariableName(`on-${key}`)}: ${getColor(getTextColor(colors[key]))}`).join(';')\n\n    return `${renderedColors};${renderedOnColors}`\n  }\n\n  const renderCSSVariablesStyleContent = (colors: ColorVariables = configColors) => {\n    const colorNames = Object.keys(colors)\n\n    let result = ':root {\\n'\n    colorNames.forEach((key) => {\n      result += generateCSSVariable(key, colors[key])\n    })\n    colorNames.forEach((key) => {\n      result += generateCSSVariable(`on-${key}`, getColor(getTextColor(colors[key])))\n    })\n    result += '}\\n'\n\n    return result\n  }\n\n  const uniqueId = computed(generateUniqueId)\n\n  const updateColors = (newValue: ColorVariables | undefined) => {\n    if (!newValue) { return }\n    if (isServer()) { return }\n\n    const styleContent = renderCSSVariablesStyleContent(newValue)\n\n    addOrUpdateStyleElement(`va-color-variables-${uniqueId.value}`, () => styleContent)\n  }\n\n  watch(configColors, (newValue) => {\n    updateColors(newValue)\n  }, { immediate: true, deep: true })\n\n  return {\n    colors: configColors,\n    currentPresetName,\n    renderCSSVariables,\n    updateColors,\n    renderCSSVariablesStyleContent,\n  }\n}\n"],"names":[],"mappings":";;;;;;AAaa,MAAA,sBAAsB,CAAC,KAAa,UAAkB;AAC1D,SAAA,GAAG,gBAAgB,GAAG,MAAM;AAAA;AACrC;AAEa,MAAA,0BAA0B,CAAC,KAAU,WAAiC;AAC3E,QAAA,EAAE,QAAQ,cAAc,cAAc,UAAU,mBAAmB,gBAAgB;AAGnF,QAAA,qBAAqB,CAAC,SAAqC,iBAAiB;AAChF,QAAI,CAAC,QAAQ;AAAE;AAAA,IAAO;AAEhB,UAAA,aAAa,OAAO,KAAK,MAAM;AACrC,UAAM,iBAAiB,WAAW,IAAI,CAAC,QAAQ,GAAG,gBAAgB,GAAG,MAAM,OAAO,GAAG,GAAG,EAAE,KAAK,GAAG;AAClG,UAAM,mBAAmB,WAAW,IAAI,CAAC,QAAQ,GAAG,gBAAgB,MAAM,KAAK,MAAM,SAAS,aAAa,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,GAAG;AAEpI,WAAO,GAAG,kBAAkB;AAAA,EAAA;AAGxB,QAAA,iCAAiC,CAAC,SAAyB,iBAAiB;AAC1E,UAAA,aAAa,OAAO,KAAK,MAAM;AAErC,QAAI,SAAS;AACF,eAAA,QAAQ,CAAC,QAAQ;AAC1B,gBAAU,oBAAoB,KAAK,OAAO,GAAG,CAAC;AAAA,IAAA,CAC/C;AACU,eAAA,QAAQ,CAAC,QAAQ;AAChB,gBAAA,oBAAoB,MAAM,OAAO,SAAS,aAAa,OAAO,GAAG,CAAC,CAAC,CAAC;AAAA,IAAA,CAC/E;AACS,cAAA;AAEH,WAAA;AAAA,EAAA;AAGH,QAAA,WAAW,SAAS,gBAAgB;AAEpC,QAAA,eAAe,CAAC,aAAyC;AAC7D,QAAI,CAAC,UAAU;AAAE;AAAA,IAAO;AACxB,QAAI,YAAY;AAAE;AAAA,IAAO;AAEnB,UAAA,eAAe,+BAA+B,QAAQ;AAE5D,4BAAwB,sBAAsB,SAAS,SAAS,MAAM,YAAY;AAAA,EAAA;AAG9E,QAAA,cAAc,CAAC,aAAa;AAChC,iBAAa,QAAQ;AAAA,KACpB,EAAE,WAAW,MAAM,MAAM,KAAM,CAAA;AAE3B,SAAA;AAAA,IACL,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}