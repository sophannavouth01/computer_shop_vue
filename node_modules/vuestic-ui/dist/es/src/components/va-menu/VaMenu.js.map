{"version":3,"file":"VaMenu.js","sources":["../../../../../src/components/va-menu/VaMenu.vue"],"sourcesContent":["<template>\n  <VaDropdown v-bind=\"dropdownProps\" ref=\"dropdown\">\n    <template #anchor>\n      <slot name=\"anchor\" />\n    </template>\n\n    <VaDropdownContent @keydown=\"onKeydown\">\n      <VaMenuList @keydown.enter.space.prevent.stop v-bind=\"menuListProps\" ref=\"menuList\" @selected=\"$emit('selected', $event); close()\">\n        <template v-if=\"$slots.default\" #default>\n          <slot />\n        </template>\n      </VaMenuList>\n    </VaDropdownContent>\n  </VaDropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, nextTick, ref } from 'vue'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\nimport { VaMenuList } from '../va-menu-list'\nimport { extractComponentProps, extractComponentEmits, filterComponentProps } from '../../utils/component-options'\nimport { useImmediateFocus, useComponentPresetProp } from '../../composables'\nimport { focusFirstFocusableChild } from '../../utils/focus'\nimport { unwrapEl } from '../../utils/unwrapEl'\n\nconst VaMenuListProps = extractComponentProps(VaMenuList)\nconst VaMenuListEmits = extractComponentEmits(VaMenuList)\nconst VaDropdownProps = extractComponentProps(VaDropdown)\nconst VaDropdownEmits = extractComponentEmits(VaDropdown)\n\nexport default defineComponent({\n  name: 'VaMenu',\n\n  components: { VaDropdown, VaDropdownContent, VaMenuList },\n\n  props: {\n    ...useComponentPresetProp,\n    ...VaMenuListProps,\n    ...VaDropdownProps,\n    stickToEdges: { type: Boolean, default: true },\n  },\n\n  emits: [\n    ...VaDropdownEmits,\n    ...VaMenuListEmits,\n  ],\n\n  setup () {\n    const menuList = ref<HTMLElement>()\n    const dropdown = ref<typeof VaDropdown>()\n\n    useImmediateFocus(menuList)\n\n    const close = () => {\n      dropdown.value?.hide()\n      nextTick(() => {\n        const el = unwrapEl(dropdown.value?.anchorRef)\n        if (el) { focusFirstFocusableChild(el) }\n      })\n    }\n\n    const onKeydown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        close()\n      }\n\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        event.preventDefault()\n      }\n    }\n\n    return {\n      onKeydown,\n      dropdown,\n      menuList,\n      menuListProps: filterComponentProps(VaMenuListProps),\n      dropdownProps: filterComponentProps(VaDropdownProps),\n      close,\n    }\n  },\n})\n</script>\n"],"names":["_resolveComponent","_openBlock","_createBlock","_mergeProps","_withCtx","_renderSlot","_createVNode","_withKeys","_withModifiers","_createSlots"],"mappings":";;;;;;AACE,QAAA,wBAAAA,iBAYa,YAZb;SAEIC,UAAsB,GAAAC,YAAA,uBAAAC,WAAA,KAAA,eAAA,EAAA,KAAA,WAAA,CAAA,GAAA;AAAA,IAAA,QAAAC,QAAA,MAAA;AAAA,MASJC,WAAA,KAAA,QAAA,QAAA;AAAA,IAAA,CAAA;AAAA,IADL,SAAAD,QAAA,MAAA;AAAA,MAAAE,YAJb,8BAIa,EAAA,WAAA,KAAA,UAAA,GAAA;AAAA,QAAA,SAJAF,QAAO,MAAA;AAAA,UAAAE,YAAkC,uBAAaH,WAAA;AAAA,YAAE,WAAI,OAAU,CAAA,MAAA,OAAA,CAAA,IAAAI,SAAAC,cAAA,MAAA;AAAA,YAAA,GAAA,CAAA,WAAA,MAAA,CAAA,GAAA,CAAA,SAAA,OAAA,CAAA;AAAA,UAAA,GAAE,KAAQ,eAAA;AAAA,YAAA,KAAA;AAAA,YACrE,YAAA,OAAC,CAAO,MAAA,OAAA,CAAA,IAAA,CAAA,WAAA;AAAA,mBAAA,MAAA,YAAA,MAAA;AAAA,mBAAA,MAAA;AAAA,YAAA;AAAA,UAAA,CAAA,GAAAC,YAAA,EAAA,GAAA,EAAA,GAAA;AAAA,YAAG,KAAA,OAAA,UAAA;AAAA,cAC/B,MAAA;AAAA,cAAA,IAAAL,QAAA,MAAA;AAAA;;;;;;;;;;;;;"}