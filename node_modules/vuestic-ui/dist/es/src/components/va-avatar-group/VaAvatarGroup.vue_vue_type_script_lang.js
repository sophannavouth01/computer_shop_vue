import { defineComponent, computed } from "vue";
import { V as VaAvatar } from "../va-avatar/index.js";
import { p as pick } from "../../../vendor.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { u as useSizeProps, a as useSize } from "../../composables/useSize.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useBem } from "../../composables/useBem.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
const VaAvatarProps = extractComponentProps(VaAvatar);
const _sfc_main = defineComponent({
  name: "VaAvatarGroup",
  components: {
    VaAvatar
  },
  props: {
    ...useSizeProps,
    ...useComponentPresetProp,
    ...VaAvatarProps,
    max: {
      type: Number,
      default: 0
    },
    vertical: {
      type: Boolean,
      default: false
    },
    options: {
      type: Array,
      default: () => []
    },
    /** If there are more avatars that can be displayed we show rest number. This prop changes color of rest indicator. */
    restColor: {
      type: String,
      default: "secondary"
    }
  },
  setup(props) {
    const classComputed = useBem("va-avatar-group", () => ({
      ...pick(props, ["vertical"])
    }));
    const maxOptions = computed(() => props.max && props.max <= props.options.length ? props.options.slice(0, props.max) : props.options);
    const visibleItemsCount = computed(() => props.max ? props.max + 1 : 1);
    const restOptionsCount = computed(() => {
      const hasOptions = props.options.length > 0;
      const canAddMoreOptions = maxOptions.value.length < props.options.length;
      const remainingOptions = props.options.length - (props.max || 0);
      return hasOptions && canAddMoreOptions ? remainingOptions : 0;
    });
    const { sizeComputed, fontSizeComputed } = useSize(props, "VaAvatarGroup");
    const filteredAvatarProps = filterComponentProps(VaAvatarProps);
    const avatarProps = computed(() => ({
      ...filteredAvatarProps.value,
      fontSize: fontSizeComputed.value,
      size: sizeComputed.value
    }));
    return {
      classComputed,
      maxOptions,
      visibleItemsCount,
      restOptionsCount,
      avatarProps
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaAvatarGroup.css';
//# sourceMappingURL=VaAvatarGroup.vue_vue_type_script_lang.js.map
